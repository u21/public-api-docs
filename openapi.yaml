openapi: 3.0.3
info:
  title: Unit21 API Endpoints
  description: |
    Every endpoint available to consumers of the Unit21 API.
  version: '1.0'
  contact:
    name: Unit21
    url: https://unit21.ai
x-readme:
  proxy-enabled: false
servers:
  - url: https://sandbox1-api.unit21.com/v1
    description: Sandbox1 server for testing
  - url: https://rtr.sandbox1.unit21.com
    description: Sandbox1 server for RTR testing
  - url: https://sandbox2-api.unit21.com/v1
    description: Sandbox2 server for testing
  - url: https://api.unit21.com/v1
    description: Production1 server
  - url: https://rtr.prod1.unit21.com
    description: Production1 RTR server
  - url: https://api.prod2.unit21.com/v1
    description: Production2 server
security:
  - ApiKeyAuth: []
tags:
  - name: Entities API
    description: |
      _Entities_ are typically businesses or users that have transactions on your platform.  The `/entities` endpoint can create, list, and update entities.
  - name: Instruments API
    description: |
      Instruments represent any physical, digital, or logical intermediary between an entity and a transaction event. Instruments can also represent digital or tech items such as phones, laptops, servers, printers or even company cars. The `/instruments` endpoint can create, list, and update instruments. 
  - name: Devices API
    description: |
      Devices representing any computer or physical device used to execute an event. Devices are most suitable when events can be traced back to a specific device fingerprint. The `/devices` endpoint can create, list, and update instruments. 
  - name: Events API
    description: |
      Events have two types, _transaction events_  and _action events_:
      * Transaction events are any monetary flow that is sent or received by an entity on your system.
      * Action events are non-monetary changes of state that occur on your system, e.g. user logins. The `/events` endpoint sends and receives data about significant actions that occur with an entity or instrument on your system.  
  - name: Agents API
    description: |
      Agents are your organization's members who use the Unit21 system to investigate suspicious objects and events. The `/agents` endpoint can list your agents. 
  - name: Rules API
    description: |
      Rules are the model logic that will find fraudulent and suspicious transactions and actions. Rules create alerts that can turn into cases with flagged entities, transactions and instruments. The `/rules` endpoint can get and list rules. 
  - name: Alerts API
    description: |
      Alerts have two origins. Typically, alerts are generated whenever a Unit21 detection tool (like a rule) flags an object, like an entity. However, your organization can also send alerts generated from your in-house detection systems. The `/alerts` endpoint can create, list, and update alerts. 
  - name: Cases API
    description: |
      Cases are usually active investigations, which may span multiple events, entities and documents. They can be directly escalated into a suspicious activity report. The `/cases` endpoint can create, list, and update cases. 
  - name: Sars API
    description: |
      Sars are cases that have been investigated and turned into a Suspicious Activity report with the intent to file it to FinCen. The `/sars` endpoint can get and list sars. 
  - name: Entity Verification API
    description: |
      Unit21 can execute entity verifications according to steps defined in system workflows. They can run when a new entity is added to the system, an update is made to an existing entity, or by directly triggering an API endpoint.
  - name: Verification Forms API
    description: |
      With verification forms, you can automate ID verification and user collection. To gather user input, the `verification forms` endpoint creates a URL. This URL is only valid for a specified period of time.
  - name: Webhooks API
    description: |
      Whenever an event happens on the Unit21 platform, Unit21 can send a webhook about the event to whatever URL you configure. Such events include entity verification results, generated alerts, case re-openings and closings, etcetera.
  - name: Matchlists API
    description: |
      Matchlists comprise one of the following categories:
        * of entities (users or business)
        * IPs (single or ranges)
        * strings
  - name: Exports API
    description: |
      If you want to download files requested via the dashboard or the bulk export endpoints. The `/file-exports` endpoint can get and list sars. 
  - name: Datafiles API
    description: |
      If you want to bulk upload multiple objects, you can send them via a POST to the `/datafiles` endpoint. For the fastest processing, the datafile SHOULD be a JSON file in the format of a typical POST request to this API.
  - name: Import API
    description: |
      If you want to upload a file with a lot of information in it, you can send them via a POST to a custom URL. You can request this URL via a POST to the `/datafiles` endpoint.  For the fastest processing, the file SHOULD be JSON or CSV.
paths:
  /entities/create:
    post:
      tags:
        - Entities API
      summary: Create an entity
      operationId: create_entity
      description: |
        Creates a new entity, sending entity data in the request body. 

        If the `/entities/create` API is called for an entity that already exists in our system, it is treated it as an [upsert](https://docs.unit21.ai/reference/should-i-update-or-upsert) and an update on the existing entity is performed. However, Unit21 selectively ignores upserts if the request is identical to a previous request. 

        If you want to perform strict validation and not perform an upsert on conflict, specifying `options.upsert_on_conflict: false` will prevent the request from overwriting an existing entity.

        Updates to an entity's `general_data.entity_id` are not allowed. 

        Use this endpoint to turn a [placeholder](https://docs.unit21.ai/reference/placeholder-objects) entity into an entity in the Unit21 system.

        Whitelisted entities cannot be updated through the `/entities/create` endpoint. 

        Instruments can be associated with entities by providing the IDs of these instruments within the `instrument_ids` section of the request. If the instrument doesn't already exist, Unit21 creates a [placeholder](https://docs.unit21.ai/reference/placeholder-objects) instrument.

        We recommend that you create entities prior to running verification. In the event you wish to run a verification on an entity immediately, Unit21 recommends that you wait at-least 2 minutes for your entity data to be fully processed. You will receive a **423 error code** if an entity is *busy*. When a 200 response is received, the data has been successfully stored on the Unit21 backend; however, it may take a few additional seconds to process that data so that it becomes available in subsequent API calls, in the frontend UI, and/or for verification purposes.

        Follow the links for more information:
          - [Relationships](https://docs.unit21.ai/reference/relationships)
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Verification options](https://docs.unit21.ai/reference/identity-verification-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
      requestBody:
        $ref: '#/components/requestBodies/createEntity'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEntityResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /entities/create/direct:
    post:
      tags:
        - Entities API
      summary: Create an entity directly
      operationId: create_entity_directly
      description: |
        Creates or updates an entity immediately, publishing directly to kafka. This is a performance endpoint.

        Please see the `/entity/create` [endpoint](https://docs.unit21.ai/reference/create_entity) for more information.

        A successfull entry comes back `null`.
      requestBody:
        $ref: '#/components/requestBodies/createEntityDirect'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: null
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}:
    get:
      tags:
        - Entities API
      summary: Get an entity
      description: |-
        Returns all data objects belonging to a single entity, including `general_data`, `document_data`, etc.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities will not be listed.

        This endpoint requires the `entity_id` which is a unique ID created by your organization to identify the entity. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.
      operationId: get_entity
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/entityList'
                  - properties:
                      relationships:
                        $ref: '#/components/schemas/relationshipsDataProperties'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/update:
    put:
      tags:
        - Entities API
      summary: Update entity
      deprecated: true
      description: |-
        > ❗️ THIS ENDPOINT IS UNDER DEPRECATION.
        >
        > For new implementations, please use the [Create Entity](https://docs.unit21.ai/reference/create_entity) endpoint instead. The Create Entity endpoint allows upserts, supports successive updates, and is capable of batch requests.

        Updates an entity's information using the `entity_id` from your platform. 

        Updating an entity has no required fields. You MAY send any subset of the fields that the entities/create endpoint accepts.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities cannot be updated.

        This endpoint requires the `entity_id` which is a unique ID created by your organization to identify the entity. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.

        Note that you can also update an entity using an upsert through `/entities/create`.

        Follow the links for more information:
          - [Relationships](https://docs.unit21.ai/reference/relationships)
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Verification options](https://docs.unit21.ai/reference/identity-verification-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
      operationId: update_entity
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        description: Any or all of the following objects are accepted
        required: true
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/generalEntitiesBasic'
                - $ref: '#/components/schemas/userData'
                - $ref: '#/components/schemas/businessData'
                - $ref: '#/components/schemas/documentDataArray'
                - $ref: '#/components/schemas/instrumentArray'
                - $ref: '#/components/schemas/communicationData'
                - $ref: '#/components/schemas/digitalDataArray'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/riskScores'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/relationshipsData'
                - $ref: '#/components/schemas/entityOptions'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateEntityResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/add-instruments:
    put:
      tags:
        - Entities API
      summary: Add instruments to entity
      description: |-
        Associate an entity with an array of instruments.

        Specify the `instrument_id` of the instrument when associating instruments. 

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities cannot be updated.

        If we do not find any instruments with a corresponding `instrument_id` in our  system, we will create a [placeholder](https://docs.unit21.ai/reference/placeholder-objects) for it. 

        Instrument details can then be supplemented  through the `/instruments/create` or `/instruments/update` endpoints.
          
      operationId: add_instruments
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkInstrument'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/link-media:
    put:
      tags:
        - Entities API
      summary: Add media to an entity
      description: |-
        Adds rich media objects (images, videos, etc.) to an existing entity. 

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities cannot be updated.

        This endpoint is useful for sending in rich media such as profile pictures, ID card scans, official documents etc.  that you want available for investigative and verification purposes.

        Supported file types are: txt, pdf, video (mp4, mov, wmv, avi, mkv), images (png, jpg, tiff, gif, raw, eps). The max file size is 5 MB per file.

        The payload to this endpoint can either be a **form-data** or a **base64** encoded media file via the requests JSON body.

        **Form-data** sent to this endpoint must use the key `media_key` and the `value` as the media file.  If you wish to provide optional information, use the `media_key` and provide stringified JSON data as the value.  There are no required fields in each media file's supplementary form data. However, if a recognized `media_type` value is provided,  the Unit21 system will be able to use the media object for purposes such as document verification.

        ```
          --form 'document_front=@/src/103031/images/document_front.jpg' \
          --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```

        **Base64** encoded media objects must follow the format:

        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers_License.png",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT",
            "custom_data": {
              "internal_notes": "Reviewed by Mitchell on 31 June 2019",
              "reviewers": 3,
              "login": 1638384860,
              "timestamp": "2012-03-40 05:12:41.000Z",
              "daily_email": true,
              "employees": ["John", "Anna", "Peter"],
              "socure_device_session_id": "12121212121212112"
            }
          }
        ```

        `media` and `name` are the only required fields for each media object. The `name` must include the file extension such a `File.pdf`. Supplementary form data is sent through the optional `custom_data` object.

        For verification purposes, recognized values of `media_type` are: 


          | media_type                  |
          |-----------------------------|
          | IMAGE_PROFILE_PICTURE       |
          | IMAGE_DRIVERS_LICENSE_FRONT |
          | IMAGE_DRIVERS_LICENSE_BACK  |
          | IMAGE_PASSPORT_FRONT        |
          | IMAGE_ID_CARD_FRONT         |
          | IMAGE_ID_CARD_BACK          |
          | IMAGE_FACE_IMAGE            | 
      operationId: link_media_to_entity
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/delete-all-media:
    put:
      tags:
        - Entities API
      summary: Delete entity media
      description: |-
        Deletes all rich media objects (images, videos, etc.) belonging to an existing entity. 

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities cannot be updated.
      operationId: del_media_entity
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /entities/bulk-export:
    post:
      tags:
        - Entities API
      summary: Bulk export entities
      description: |
        Initiates an email and dashboard export of entities. The export will be as a CSV file.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) entities are not exported.

        Either the `filters` or the list of `entity_ids` are required for the export. 

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_entities
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/entity-unit21-Ids'
                - $ref: '#/components/schemas/entityExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messageResponse'
              example:
                message: File export has started
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /instruments/create:
    post:
      tags:
        - Instruments API
      summary: Create an instrument
      operationId: create_instrument
      description: |
        Creates a new instrument, sending instrument data in the request body.

        Recommended values for `instrument_type` include: account, crypto_address, digital_wallet, credit_card, debit_card, gift_card, voucher, check, laptop,  company_computer, smartphone.

        If the `/instruments/create` API is called for an instrument that already exists in our system (i.e. has an existing `instrument_id`), it is treated it as an [upsert](https://docs.unit21.ai/reference/should-i-update-or-upsert) and an update on the existing instrument is performed. However, Unit21 selectively ignores upserts if the request is identical to a previous request. 

        To turn a [placeholder](https://docs.unit21.ai/reference/placeholder-objects) instrument into an instrument in the Unit21 system, use this endpoint.

        Updates to an instrument's `instrument_id` are not allowed.

        Follow the links for more information:
          - [Relationships](https://docs.unit21.ai/reference/relationships)
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
          
      requestBody:
        $ref: '#/components/requestBodies/createInstrument'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createInstrumentResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/instruments/{instrument_id}:
    get:
      tags:
        - Instruments API
      summary: Get an instrument
      description: |-
        Returns all data objects belonging to a single instrument.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) instruments are not listed.

        This endpoint requires the `instrument_id` which is a unique ID created by your organization to identify the instrument. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.
      operationId: get_instrument
      parameters:
        - $ref: '#/components/parameters/instrument_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/instrumentList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/instruments/{instrument_id}/update:
    put:
      tags:
        - Instruments API
      summary: Update instrument
      deprecated: true
      description: |-
        > ❗️ THIS ENDPOINT IS UNDER DEPRECATION.
        >
        > For new implementations, please use the [Create Instrument](https://docs.unit21.ai/reference/create_instrument) endpoint instead. The Create Instrument endpoint allows upserts, supports successive updates, and is capable of batch requests.

        Updates an instrument's information using the `instrument_id` from your platform.

        This endpoint requires the `instrument_id` which is a unique ID created by your organization to identify the instrument. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.

        Updating an instrument has no required fields. You MAY send any subset of the fields that the `instruments/create` endpoint accepts.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) instruments cannot be updated.

        Note that you can also update an instrument using an upsert through `/instruments/create`.

        Follow the links for more information:
          - [Relationships](https://docs.unit21.ai/reference/relationships)
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
      operationId: update_instrument
      parameters:
        - $ref: '#/components/parameters/instrument_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/InstrumentBasic'
                - $ref: '#/components/schemas/entityRelations'
                - $ref: '#/components/schemas/locationDataArray'
                - $ref: '#/components/schemas/digitalDataArray'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateInstrumentResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /instruments/bulk-export:
    post:
      tags:
        - Instruments API
      summary: Bulk export instruments
      description: |
        Initiates an email and dashboard export of instruments. The export will be as a CSV file.

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) instruments are not exported.

        The agent making the request will need to have the correct permissions for the export to ensure success.

        Either the `filters` or the list of `instrument IDs` are required for the export.

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_instruments
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/instrument-unit21-Ids'
                - $ref: '#/components/schemas/instrumentExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /events/create:
    post:
      tags:
        - Events API
      summary: Create an event
      operationId: create_event
      description: |
        Creates a new event, sending event data in the request body. 

        Two objects are required: `general_data` and either `transaction_data` or `action_data`. `general_data` requires the fields: `event_id`, `event_type`, and `event_time`. `transaction_data` requires only the field `amount`.

        If we receive a request to create an event with an `event_id` that already exists in our system, we treat it as an [upsert](https://docs.unit21.ai/reference/should-i-update-or-upsert) and perform an update on the existing event. It is not possible to update `general_data.event_id` once the event has been created. All other values can be overwritten. 

        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Verification options](https://docs.unit21.ai/reference/identity-verification-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/eventOptions'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createEventResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /evaluate:
    post:
      tags:
        - Events API
      summary: Run real-time rules on an event
      operationId: create_rtr_event
      description: |
        Runs real-time rules on a particular event, the details of which are sent in the request body. 

        To save the event that was evaluated, it must be sent to the event creation endpoint separately;  however, the same payload can be used to simplify implementation.
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/customData'
                - $ref: '#/components/schemas/eventOptions'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rtrEventResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/events/{event_id}:
    get:
      tags:
        - Events API
      summary: Get an event
      description: |-
        Returns all data objects belonging to a single event.

        This endpoint requires the `events_id` which is a unique ID created by your organization to identify the event. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.
      operationId: get_event
      parameters:
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/eventList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/events/{event_id}/update:
    put:
      tags:
        - Events API
      summary: Update event
      deprecated: true
      description: |-
        > ❗️ THIS ENDPOINT IS UNDER DEPRECATION.
        >
        > For new implementations, please use the [Create Event](https://docs.unit21.ai/reference/create_event) endpoint instead. The Create Event endpoint allows upserts, supports successive updates, and is capable of batch requests.

        Update an event using the `event_id` from your platform. 

        Updating an event has no required fields. You MAY send any  subset of the fields that the events/create endpoint accepts.

        This endpoint requires the `event_id` which is a unique ID created by your organization to identify the event. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.

        Note that you can also update an event using an upsert through `/events/create`.

        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)
          - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)
          - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)
      operationId: update_event
      parameters:
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/eventOptions'
              anyOf:
                - $ref: '#/components/schemas/generalEvents'
                - $ref: '#/components/schemas/digitalData'
                - $ref: '#/components/schemas/locationData'
                - $ref: '#/components/schemas/transactionData'
                - $ref: '#/components/schemas/actionData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateEventResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/events/{event_id}/link-media:
    put:
      tags:
        - Events API
      summary: Add media to an event
      description: |-
        Adds rich media objects (images, videos, etc.) to an existing event. 

        [Placeholder](https://docs.unit21.ai/reference/placeholder-objects) events cannot be updated.

        This endpoint is useful for sending in rich media such as check images, receipts, invoices, and other documents that you want available to investigative.

        Supported file types are: txt, pdf, video (mp4, mov, wmv, avi, mkv), images (png, jpg, tiff, gif, raw, eps). The max file size is 5 MB per file.

        The payload to this endpoint can either be a **form-data** or a **base64** encoded media file via the requests JSON body.

        **Form-data** sent to this endpoint must use the key `media_key` and the `value` as the media file.  If you wish to provide optional information, use the `media_key` and provide stringified JSON data as the value.  `media_type` is the only required field in each media file's supplementary form data. 

        ```
          --form 'check_front=@/src/103031/images/check_image_front.jpg' \
          --form 'check_front={"media_type": "CHECK_IMAGE_FRONT", "source": "direct_deposit_capture", "timestamp": 1572673229}'
        ```

        **Base64** encoded media objects must include `media`, `name`, and `media-type` for each media object. The `name` must include the file extension such a `File.pdf`. Supplementary form data is sent through the optional `custom_data` object.

        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Check_Image_Front.png",
            "media_type": "CHECK_IMAGE_FRONT",
            "custom_data": {
              "internal_notes": "Reviewed by Mitchell Jones on 31 June 2019",
              "source": "direct_deposit_capture",
              "timestamp": "2012-03-40 05:12:41.000Z"
            }
          }
        ```
      operationId: link_media_to_event
      parameters:
        - $ref: '#/components/parameters/event_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /events/bulk-export:
    post:
      tags:
        - Events API
      summary: Bulk export events
      description: |
        Initiates an email and dashboard export of events. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `event IDs` are required for the export.

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/eventIds'
                - $ref: '#/components/schemas/eventExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /txn-events/bulk-export:
    post:
      tags:
        - Events API
      summary: Bulk export transactions
      description: |
        Initiates an email and dashboard export of events. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `event IDs` are required for the export.

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_transactions
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/eventIds'
                - $ref: '#/components/schemas/eventExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /rules/list:
    post:
      tags:
        - Rules API
      summary: List rules
      description: |-
        Returns paginated list of of top-level information about rules.     

        Because the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.
        * `limit`  indicates how many objects the request returns (the page maximum is 50)
        * `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record. The offset is relative to the number of pages (not the total count of objects).

        The `total_count` field contains the total number of rules where the  `response_count` field contains the number of rules included in the response.
      operationId: list_rules
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listRuleResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /rules/{unit21_id}:
    get:
      tags:
        - Rules API
      summary: Get a rule
      description: |-
        Returns all data objects belonging to a single rule.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the rule is first created.
      operationId: read_one_rule
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ruleList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /rules/bulk-export:
    post:
      tags:
        - Rules API
      summary: Bulk export rules
      description: |
        Initiates an email and dashboard export of rules. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `rule IDs` are required for the export.

        **Currently `rule_ids` should actually be `unit21_ids`.**

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_rules
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/rule-unit21-Ids'
                - $ref: '#/components/schemas/ruleExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/list:
    post:
      tags:
        - Alerts API
      summary: List alerts
      description: |
        Returns an array of top-level information about alerts in your environment.

        Because the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.
        * `limit`  indicates how many objects the request returns (the page maximum is 50)
        * `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record.

        To narrow down your alert search, we provide filter parameters to this endpoint. Note that all list inputs function as an "or" filter, as in any one of the values must match the selected alert(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `case_id`               | Numeric     | Only alerts with the associated case ID will be shown.                                                            |
          | `types`                 | String[]    | Must be list of alert types: `tm`, `kyc`, `chainalysis`, `car, or `manual`                                        |
          | `created_after`         | Numeric     | Alerts created on or after this unix timestamp                                                                    |
          | `created_before`        | Numeric     | Alerts created before this unix timestamp                                                                         |
          | `dispositions`          | String[]    | List of alert disposition states (defined on an integration basis)                                                |
          | `dispositioned_after`   | Numeric     | Alerts with a disposition most recently updated after this unix timestamp                                         |
          | `dispositioned_before`  | Numeric     | Alerts with a disposition most recently updated before this unix timestamp                                        |
          | `dispositioned_by`      | String[]    | List of agent emails. Returns alerts with a disposition most recently changed by agents in the list               |
          | `rules`                 | Numeric[]   | List of Unit21 rule ids that are associated with the alert                                                        |
          | `associated_entities`   | String[]    | List of entity ids associated with this alert                                                              |
          | `associated_events`     | String[]    | List of event ids associated with this alert                                                               |
          | `associated_instruments`| String[]    | List of instrument ids associated with this alert                                                          |
          | `sources`               | String[]    | Must be list of alert sources: `INTERNAL`, `EXTERNAL`                                                             |
          | `statuses`              | String[]    | Must be list of alert statuses: `OPEN`, `CLOSED`                                                                  |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this alert with (e.g. `alert_type:high_velocity` or `alert_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned alerts. Removing unneeded options can improve response speed        |


        The `total_count` field contains the total number of alerts where the  `response_count` field contains the number of alerts included in the response.

        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          
      operationId: list_alerts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listAlertRequest'
                - $ref: '#/components/schemas/alertListFilters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listAlertResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/create:
    post:
      tags:
        - Alerts API
      summary: Create alerts
      operationId: create_alert
      description: "Creates a new alert, sending alert data in the request body. \nTo create an Alert, you MUST include the following fields: `alert_id`, `alert_type`, `created_at`, `title`, and `status`. The other top-level fields are optional.\n\nIf we receive a request to create an alert for an `alert_id` that already exists in our system,  we will respond with a **409 error code** indicating that this alert cannot be created/updated. You must use the `/alert/update` endpoint to update an alert.\n\nYou can add the following objects to an alert:\n\n  | Field                    | Type     | Description                                                                                                           |\n  |--------------------------|----------|-----------------------------------------------------------------------------------------------------------------------|\n  | `rules`\t                 | String[] | Unique identifier of the rules/triggers/scenarios that triggered this alert                                           |\n  | `events`\t               | Object[] | Transactions affiliated with the alert. Each object must consist of a `event_id` and `event_type` field               |\n  | `entities`\t             | Object[] | Users or businesses affiliated with the alert. Each object must consist of an `entity_id` and `entity_type` field     |\n  | `instruments`\t           | String[] | Unique identifiers of any instruments affiliated with the alert                                                       |\n\n\nPlease note that if `verification_result_id` is included, it will link the entity that is associated  with the verification result with the alert.\n\nUpdates to an alert's `alert_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)\n  - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                             |\n  |--------------------------|----------|---------------------------------------------------------|\n  | `alert_id`\t             | String   | Unique identifier of the alert on your platform         |\n  | `unit21_id`\t             | String   | Internal ID of the alert within Unit21's system         |\n  | `previously_existed`\t   | Boolean  | If alert (with the same `alert_id`) already exists      |\n"
      requestBody:
        $ref: '#/components/requestBodies/createAlert'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createAlertResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/{unit21_id}:
    get:
      tags:
        - Alerts API
      summary: Get an alert
      description: |-
        Returns all data objects belonging to a single alert.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the entity is first created.
      operationId: get_alert_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAlertResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/{unit21_id}/update:
    put:
      tags:
        - Alerts API
      summary: Update alert
      description: "Updates an alert's information using the `unit21_id`. ONLY WORKS ON EXTERNAL ALERTS.\n\nUpdating an alert has no required fields. You MAY send any subset of the fields that the `alerts/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the entity is first created.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                             |\n  |--------------------------|----------|---------------------------------------------------------|\n  | `alert_id`\t             | String   | Unique identifier of the alert on your platform         |\n  | `unit21_id`\t             | String   | Internal ID of the alert within Unit21's system         |"
      operationId: update_alert
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/AlertsUpdate'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateAlertResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/{unit21_id}/link-media:
    put:
      tags:
        - Alerts API
      summary: Add media to an alert
      description: |-
        Adds rich media objects (images, videos, etc.) to an existing alert. 

        This endpoint is useful for sending in rich media such as profile pictures, ID card scans, official documents etc.  that you want available for investigative and verification purposes.

        Supported file types are: txt, pdf, video (mp4, mov, wmv, avi, mkv), images (png, jpg, tiff, gif, raw, eps). The max file size is 5 MB per file. 

        The payload to this endpoint can either be a **form-data** or a **base64** encoded media file via the requests JSON body.

        **Form-data** sent to this endpoint must use the key `media_key` and the `value` as the media file.  If you wish to provide optional information, use the `media_key` and provide stringified JSON data as the value.  There are no required fields in each media file's supplementary form data. However, if a recognized `media_type` value is provided,  the Unit21 system will be able to use the media object for purposes such as document verification.

        ```
            --form 'document_front=@/src/103031/images/document_front.jpg' \
            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```

        **Base64** encoded media objects must follow the format:

        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers_License.png",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT"
          }
        ```
            
        `media` and `name` are the only required fields for each media object. The `name`` must include the file extension such a `File.pdf`. Supplementary form data is sent through the optional `custom_data` object.

        Recognized values of `media_type` are: 

          | media_type                  |
          |-----------------------------|
          | IMAGE_PROFILE_PICTURE       |
          | IMAGE_DRIVERS_LICENSE_FRONT |
          | IMAGE_DRIVERS_LICENSE_BACK  |
          | IMAGE_PASSPORT_FRONT        |
          | IMAGE_ID_CARD_FRONT         |
          | IMAGE_ID_CARD_BACK          |
          | IMAGE_FACE_IMAGE            |
      operationId: link_media_to_alert
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /alerts/bulk-export:
    post:
      tags:
        - Alerts API
      summary: Bulk export alerts
      description: |
        Initiates an email and dashboard export of alerts. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `alert IDs` are required for the export.

        **Currently `alert_ids` should actually be `unit21_ids`.**

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_alerts
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/alert-unit21-Ids'
                - $ref: '#/components/schemas/alertExportFilters'
                - $ref: '#/components/schemas/summary'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /cases/list:
    post:
      tags:
        - Cases API
      summary: List cases
      description: |
        Returns an array of top-level information about cases in your environment.

        Because the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.
        * `limit`  indicates how many objects the request returns (the page maximum is 50)
        * `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record.

        To narrow down your case search, we provide filter parameters to this endpoint. Note that all list inputs function as an "or" filter, as in any one of the values must match the selected case(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `created_after`         | Numeric     | Cases created on or after this unix timestamp                                                                     |
          | `created_before`        | Numeric     | Cases created before this unix timestamp                                                                          |
          | `dispositions`          | String[]    | List of case disposition states (defined on an integration basis)                                                 |
          | `dispositioned_after`   | Numeric     | Cases with a disposition most recently updated after this unix timestamp                                          |
          | `dispositioned_before`  | Numeric     | Cases with a disposition most recently updated before this unix timestamp                                         |
          | `dispositioned_by`      | String[]    | List of agent emails. Returns alerts with a disposition most recently changed by agents in the list               |
          | `rules`                 | Numeric[]   | List of Unit21 rule ids that are associated with the case                                                         |
          | `associated_entities`   | String[]    | List of entity ids associated with this case                                                                      |
          | `associated_events`     | String[]    | List of event ids associated with this case                                                                       |
          | `associated_alerts`     | Numeric[]   | List of Unit21 alert ids associated with this case                                                                |
          | `sources`               | String[]    | Must be list of alert sources: `INTERNAL`, `EXTERNAL`                                                             |
          | `statuses`              | String[]    | Must be list of alert statuses: `OPEN`, `CLOSED`                                                                  |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this case with (e.g. `case_type:high_velocity` or `case_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned cases. Removing unneeded options can improve response speed         |


        The `total_count` field contains the total number of case where the  `response_count` field contains the number of cases included in the response.

        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          
      operationId: list_cases
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listRequest'
                - $ref: '#/components/schemas/caseListFilters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listCaseResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /cases/create:
    post:
      tags:
        - Cases API
      summary: Create a case
      description: "Creates a new case, sending case data in the request body. \nTo create a case, you MUST include the following fields: `case_id`, `title`, and `created_at`.  The other top-level fields are optional.\n\nIf we receive a request to create a case for an `case_id` that already exists in our system,  we will respond with a **409 error code** indicating that this case cannot be created/updated. You must use the `/case/update` endpoint to update a case.\n\nYou can add the following objects to a case:\n\n  | Field                    | Type     | Description                                                             |\n  |--------------------------|----------|-------------------------------------------------------------------------|\n  | `alerts`\t               | Array[]  | Alerts that are associated with this case. Consists of `alert_id`s      |\n  | `events`\t               | Array[]  | Transactions affiliated with the case. Consists of `event_id`s          |\n  | `entities`\t             | Array[]  | Entities affiliated with the case. Consists of `entity_id`s             |\n\nUpdates to a cases's `case_id` are not allowed.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)\n  - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                          |\n  |--------------------------|----------|------------------------------------------------------|\n  | `case_id`\t               | String   | \tUnique identifier of the case on your platform     |\n  | `previously_existed`\t   | Boolean  | \tIf case (with the same `case_id`) already exists   |\n"
      operationId: create_case
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Cases'
                - $ref: '#/components/schemas/entityIds'
                - $ref: '#/components/schemas/eventIds'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createCaseResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /cases/{unit21_id}:
    get:
      tags:
        - Cases API
      summary: Get a case
      description: |-
        Returns all data objects belonging to a single case.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the case is first created.
      operationId: get_case_by_unit21_id
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCaseResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
  /cases/{unit21_id}/update:
    put:
      tags:
        - Cases API
      summary: Update case
      description: "Update a case through its `unit21_id`. ONLY EXTERNAL CASES CAN BE UPDATED!\n    \n\nUpdating a case has no required fields. You MAY send any subset of the fields that the `cases/create` endpoint accepts.\n\nThis endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the case is first created.\n\nNote that you can also update an alert using an upsert through `/cases/create`.\n\nFollow the links for more information:\n  - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)\n  - [Custom data](https://docs.unit21.ai/reference/best-practices-for-custom-data)\n  - [Batch uploads](https://docs.unit21.ai/reference/batch-request-examples)\n  - [Modifying tags](https://docs.unit21.ai/reference/modifying-tags)\n\n\nThe response will consist of the following fields:\n\n  | Field                    | Type     | Description                                          |\n  |--------------------------|----------|------------------------------------------------------|\n  | `case_id`\t               | String   | \tUnique identifier of the case on your platform     |\n  | `previously_existed`\t   | Boolean  | \tIf entity (with the same `case_id`) already exists |"
      operationId: update_case
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/Cases'
                - $ref: '#/components/schemas/customData'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateCaseResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /cases/{unit21_id}/link-media:
    put:
      tags:
        - Cases API
      summary: Add media to a case
      description: |-
        Adds rich media objects (images, videos, etc.) to an existing case. 

        This endpoint is useful for sending in rich media such as profile pictures, ID card scans, official documents etc.  that you want available for investigative and verification purposes.

        Supported file types are: txt, pdf, video (mp4, mov, wmv, avi, mkv), images (png, jpg, tiff, gif, raw, eps). The max file size is 5 MB per file.

        The payload to this endpoint can either be a **form-data** or a **base64** encoded media file via the requests JSON body.

        **Form-data** sent to this endpoint must use the key `media_key` and the `value` as the media file.  If you wish to provide optional information, use the `media_key` and provide stringified JSON data as the value.  There are no required fields in each media file's supplementary form data. However, if a recognized `media_type` value is provided,  the Unit21 system will be able to use the media object for purposes such as document verification.

        ```
            --form 'document_front=@/src/103031/images/document_front.jpg' \
            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
        ```

        **Base64** encoded media objects must follow the format:

        ```json
          {
            "media": "iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAYAAABNEqduAAAgAElEQVR4Aey9CbgmV1Xv...",
            "name": "Drivers_License.png",
            "media_type": "IMAGE_DRIVERS_LICENSE_FRONT"
          }
        ```
            
        `media` and `name` are the only required fields for each media object. The `name`` must include the file extension such a `File.pdf`. Supplementary form data is sent through the optional `custom_data` object.

        Recognized values of `media_type` are: 

          | media_type                    |
          |-------------------------------|
          | IMAGE_PROFILE_PICTURE         |
          | IMAGE_DRIVERS_LICENSE_FRONT   |
          | IMAGE_DRIVERS_LICENSE_BACK    |
          | IMAGE_PASSPORT_FRONT          |
          | IMAGE_ID_CARD_FRONT           |
          | IMAGE_ID_CARD_BACK            |
          | IMAGE_FACE_IMAGE              |
      operationId: link_media_to_case
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/linkMediaJSON'
                - $ref: '#/components/schemas/linkMediaForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          description: NOT FOUND
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /cases/bulk-export:
    post:
      tags:
        - Cases API
      summary: Bulk export cases
      description: |
        Initiates an email and dashboard export of cases. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `case IDs` are required for the export.

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_cases
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/caseIds'
                - $ref: '#/components/schemas/caseExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /sars/list:
    post:
      tags:
        - Sars API
      summary: List sars
      description: |-
        Returns paginated list of of top-level information about paths/sars@list.yaml    

        Because the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.
        * `limit`  indicates how many objects the request returns (the page maximum is 50)
        * `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record. The offset is relative to the number of pages (not the total count of objects).

        To narrow down your sars search, we provide filter parameters to this endpoint. Note that all list inputs function as an "or" filter, as in any one of the values must match the selected sar(s):


          | Field                   | Type        | Description                                                                                                       |
          | ----------------------- | ----------- | ----------------------------------------------------------------------------------------------------------------- |
          | `created_after`         | Numeric     | SARs created on or after this unix timestamp                                                                      |
          | `created_before`        | Numeric     | SARs created before this unix timestamp                                                                           |
          | `tag_filters`           | String[]    | List of string tags (`key:value`) or keys to associate this SARs with (e.g. `sars_type:high_velocity` or `sars_type`). If only the key is provided, we will match against all tags with that key        |
          | `limit`                 | Numeric     | A limit on the number of objects to be returned. Limit can range between 1 and 50, and the default is 10          |
          | `offset`                | Numeric     | The offset for pagination. Default is 1                                                                           |
          | `options`               | Object      | Options for the data included in the returned SARs. Removing unneeded options can improve response speed          |


        The `total_count` field contains the total number of sars where the  `response_count` field contains the number of sars included in the response.

        Follow the links for more information:
          - [Endpoint options](https://docs.unit21.ai/reference/endpoint-options)
          
      operationId: list_sars
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/listRequest'
                - $ref: '#/components/schemas/sarListFilters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listSarResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /sars/{unit21_id}:
    get:
      tags:
        - Sars API
      summary: Get a sars
      description: |-
        Returns all data objects belonging to a single SAR.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the sar is first created.
      operationId: read_one_sar
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sarList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
  /sars/bulk-export:
    post:
      tags:
        - Sars API
      summary: Bulk export sars
      description: |
        Initiates an email and dashboard export of sars. The export will be as a CSV file.

        Either the agent `ID` or `email` is required to begin the export.

        Either the `filters` or the list of `sar IDs` are required for the export.

        Custom data filters are not supported for bulk exports at this time.
      operationId: export_sars
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/sarIds'
                - $ref: '#/components/schemas/sarExportFilters'
                - $ref: '#/components/schemas/csv'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/verify:
    post:
      tags:
        - Entity Verification API
      summary: Verify an entity
      description: |
        Run a verification workflow on an entity using the `entity_id` from your platform. 

        Requires a `workflow_id`. You can create a verification workflow from the Unit21 dashboard.

        This endpoint requires the `entity_id` which is a unique ID created by your organization to identify the entity. The `org_name` is your Unit21 appointed organization name such as `google` or `acme`.
      operationId: run_verifications_workflow_through_external_id
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/entityVerification'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  end_action:
                    type: string
                    description: The end result of the workflow, one of a set of end results defined by the workflow
                  is_success:
                    type: boolean
                    description: Whether or not the workflow successful completed. Workflows rely on external services, which may at times fail
                  results:
                    type: object
                    description: Object mapping from the executed verifications (e.g. IDOLOGY:DOC_VERIFICATION)
                  full_response:
                    type: object
                    description: The raw response from the verification provider. Contents depend on the verification source and type.
              example:
                end_action: $REJECT
                is_success: true
                results:
                  IDOLOGY:DOC_VERIFICATION:
                    parsed_result: CAPTURE_NOT_APPROVED
                    verification_result_id: 73
                  IDOLOGY:ID_VERIFICATION:
                    parsed_result: ID_NON_MATCH
                    verification_result_id: 71
                  IDOLOGY:WATCHLIST_SCREENING:
                    parsed_result: NO_RESTRICTION
                    verification_result_id: 72
                full_response:
                  info: This response depends on the verification source
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/link-verification-result:
    post:
      tags:
        - Entity Verification API
      summary: Link external verification
      description: |-
        Add the verification result from an external ID provider to an entity on the Unit21 system.
        You can only send 1 result per request.
      operationId: add_verification_result_to_entity
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/linkVerificationResult'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkVerificationResponse'
              example:
                created_at: 1591992745
                entity_id: '856'
                source: IDOLOGY
                type: DOC_VERIFICATION
                verification_workflow_execution_id: 59
                full_response:
                  info: This response depends on the verification source
                  placeholderKey: placeholderValue
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /verification/result/{result_id}:
    get:
      tags:
        - Entity Verification API
      summary: Get verification results by result id
      description: Returns all the information from the verification of a specific entity.
      operationId: get_verification_result
      parameters:
        - $ref: '#/components/parameters/result_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationResult'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/continuous-monitoring:
    post:
      tags:
        - Entity Verification API
      summary: Update continuous monitoring
      description: |
        Fetch status and enables/disables Socure continuous monitoring for an entity.

        For asynchronous continuous monitoring, the endpoint will always return a 200 success status response.

        For synchronous continous monitoring, the endpoint will always return a 200 success status response  but you should look at the `is_success = true` field to check if the result was actually successful: 

        `
          {
            "error_message": "This entity has no existing continuous monitoring subscriptions to disable.",
            "is_success": true
          }
        `
      operationId: update_continuous_monitoring
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/continuousMonitoring'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /{org_name}/entities/{entity_id}/verification_workflow_executions:
    get:
      tags:
        - Entity Verification API
      summary: Get entity verification workflow IDs
      description: |-
        Returns the verification workflow IDs for an entity.

        This endpoint requires the `entity_id` which is the unique identifier of the entity in your system
      operationId: get_entity_verification_workflow_executions
      parameters:
        - $ref: '#/components/parameters/entity_id'
        - $ref: '#/components/parameters/org_name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /verification/verification-workflow-execution/{verification_workflow_execution_id}:
    get:
      tags:
        - Entity Verification API
      summary: Get verification workflow execution details
      description: Returns all the data associated with a verification_workflow_execution_id
      operationId: get_verification_workflow_execution
      parameters:
        - $ref: '#/components/parameters/verification_workflow_execution_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verification'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /verification/verification-workflow-execution/{verification_workflow_execution_id}/results:
    get:
      tags:
        - Entity Verification API
      summary: Get verification results from workflow
      description: Returns all the information from the verification workflow execution for a specific entity.
      operationId: get_verification_result_from_workflow_execution
      parameters:
        - $ref: '#/components/parameters/verification_workflow_execution_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verificationResultList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /verification-forms/create:
    post:
      tags:
        - Verification Forms API
      summary: Verification Forms API
      description: If you are verifying IDs and collecting user data, this endpoint creates a temporary URL to which you can redirect users.
      operationId: create_verification_form
      requestBody:
        required: true
        description: Set session length. Not required.
        content:
          application/json:
            schema:
              type: object
              properties:
                session_length_minutes:
                  type: integer
                  description: |
                    Time in minutes that form will be valid. Once this expires, the user can no longer submit or view the form. Max is 10080 minutes (one week). Default is 1440 minutes (one day)
                  minimum: 1
                  maximum: 10080
                  default: 1440
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  redirect_to:
                    type: string
                    format: URL
                    description: URL to redirect users to fill out form
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /file-exports/list:
    post:
      tags:
        - Exports API
      summary: List exports
      description: "Returns paginated list exports. It will only show the exports initiated by the requester (The requester is the creator of the API key)\n\n**This endpoint omits any exports from the \"System\" source (generated directly from the Dashboard instead of the API).**\n\nBecause the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.\n* `limit`  indicates how many objects the request returns (the page maximum is 50)\n* `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record. The offset is relative to the number of pages (not the total count of objects).\n\nThe `total_count` field contains the total number of exports where the  `response_count` field contains the number of exports included in the response.\n\nThe `statuses` for exports address:\n\n  | Status                   | Description                                             |\n  |--------------------------|---------------------------------------------------------|\n  | READY_FOR_DOWNLOAD\t     | File is ready for download                              |\n  | GENERATING\t             | File is generating                                      |\n  | FAILED                   | File export failed                                      |\n  | REQUESTED\t               | File exort has been requested                           |"
      operationId: list_exports
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listExports'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listExportResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /file-exports/download/{file_export_id}:
    get:
      tags:
        - Exports API
      summary: Download export
      description: Returns a signed url to download the file.
      operationId: download_file_export
      parameters:
        - $ref: '#/components/parameters/export_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listExportURLResponse'
        '202':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listExportNotReadyResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /agents/list:
    get:
      tags:
        - Agents API
      summary: List agents
      description: |-
        Returns an array of all agents in your organization who are using the environment.
        There are no options or filters for this endpoint. The request will return ALL agents.
      operationId: list_agents
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listAgentResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /agents/{agent_email}/deactivate:
    put:
      tags:
        - Agents API
      summary: Deactivate an agent
      description: Archives an agent so that he/she can no longer log in to the dashboard.
      operationId: deactivate_agent
      parameters:
        - $ref: '#/components/parameters/agent_email'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/agentList'
              example:
                unit21_id: 1237466
                email: laura@unit21.ai
                full_name: Laura Kassovic
                created_at: 1623365011
                status: INACTIVE
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /webhooks/{unit21_id}/update:
    put:
      tags:
        - Webhooks API
      summary: Update webhook URL
      description: |-
        Change the URL of an existing webhook from Unit21.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the webhook is first created.
      operationId: update_webhook
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: URL
                  description: The URL that you want to send the webhook too.
                  example: https://example.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
  /blacklists/list:
    post:
      tags:
        - Matchlists API
      summary: List matchlists
      description: |
        Returns an array of matchlist in your environment. 

        Because the response is paginated, the request body has a `limit` and `offset` field. At least one must be filled.
        * `limit`  indicates how many objects the request returns (the page maximum is 50)
        * `offset` indicates the offset for pagination. An `offset` value of 1 starts with the environment's first record.

        The `total_count` field contains the total number of matchlists where the  `response_count` field contains the number of matchlists included in the response.
      operationId: list_blacklists
      requestBody:
        $ref: '#/components/requestBodies/list'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/listBlacklistResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /blacklists/create:
    post:
      tags:
        - Matchlists API
      summary: Create a matchlist
      description: "Create a new matchlist sending matchlist data in the request body. \n\nUnit21 currently supports 5 types of matchlists:\n\n  * `STRING`: Plain strings to match against any text-type field.\n  * `IP_INET`: IPv4 or IPv6 IP addresses to matchlist.\n  * `IP_CIDR`: [Classless Inter-Domain Routing (CIDR) notation IP address ranges](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) to blacklist, \n  * `USER`: Series of fields that a Unit21 user entity will be matched against.\n  * `BUSINESS`: Series of fields that a Unit21 business entity will be matched against.\n\n\nIf the `/blacklists/create` API is called multiple times, it will create a new matchlist each time.  This endpoint does not support updates/upserts.\n\nThis endpoint does not support batch uploads.\n\nThe response will consist of the following fields:\n\n  | Field           | Type     | Description                                           |\n  |-----------------|----------|-------------------------------------------------------|\n  | `blacklist_id`  | String   | \tUnique identifier of the entity on your platform     |\n"
      operationId: create_blacklist
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createBlacklist'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createBlacklistResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /blacklists/{unit21_id}/add-values:
    post:
      tags:
        - Matchlists API
      summary: Add items to a matchlist
      description: "Add items to a matchlist, according to the matchist's `type`.\n\nEach request must specify at least **1** object to matchlist. You may add up to **100**  values to an existing matchlist at once.\n\nThe `/blacklists/<blacklist-id>/add-values` API will ignore entries provided that already exist  in the matchlist. No error will be thrown when this occurs.\n\nThe response will consist of the following fields:\n\n  | Type       | Description                                                              | Example                           |\n  |------------|--------------------------------------------------------------------------|-----------------------------------|\n  | `STRING`\t | Plain strings to match against any text-type field.                      |   \"blacklist_value\": \"abcde\"      |\n  | `IP_INET`\t | IPv4 or IPv6 IP addresses to matchlist.                                  | \t\"ip_address\": \"255.255.255.255\" |\n  | `IP_CIDR`\t | Classless Inter-Domain Routing (CIDR) [notation](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing#CIDR_notation) IP address ranges to blacklist.  | \t\"cidr\": \"255.255.255.255/32\" |\n  | `USER`\t   | \tSeries of fields that a Unit21 user entity will be matched against.     | \tuser_data object                |\n  | `BUSINESS` | Series of fields that a Unit21 business entity will be matched against.  | \tbusiness_data object            |\n"
      operationId: add_blacklist_values
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/blacklistUser'
                - $ref: '#/components/schemas/blacklistBusiness'
                - $ref: '#/components/schemas/blacklistINET'
                - $ref: '#/components/schemas/blacklistCIDR'
                - $ref: '#/components/schemas/blacklistString'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                example: {}
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /datafiles/create:
    post:
      tags:
        - Datafiles API
      operationId: create_datafiles
      summary: Upload datafiles
      deprecated: true
      description: |
        Bulk upload multiple objects of the same type. Can be entities, events, or instruments.

        Only one file can be uploaded in a request, with a file size maximum of 1GB. Please add a waiting time of two seconds between requests.

        Use `--form datafile` to specify the datafile, and `run_rules` to configure whether to run Unit21 rules on the datafile after it's processed.

        We support JSON format only.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                datafile:
                  type: string
                  format: binary
                  description: Path to datafile
                run_rules:
                  type: boolean
                  description: Whether to run U21 rules on the datafile after processing
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createDatafileResponse'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '423':
          $ref: '#/components/responses/423'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /datafiles/{unit21_id}:
    get:
      tags:
        - Datafiles API
      operationId: get_datafile_by_unit21_id
      summary: Get datafile
      deprecated: true
      description: |-
        Get details about a datafile.

        This endpoint requires the `unit21_id` which is a unique ID created by Unit21 when the datafile is first created.
      parameters:
        - $ref: '#/components/parameters/unit21_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/datafileList'
        '400':
          description: Bad Request. Your request is invalid.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/errorResponse'
                  - $ref: '#/components/schemas/messageResponse'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/404'
        '409':
          $ref: '#/components/responses/409'
        '429':
          $ref: '#/components/responses/429'
        '500':
          $ref: '#/components/responses/500'
        '503':
          $ref: '#/components/responses/503'
  /imports/pre-signed-url/create:
    post:
      tags:
        - Import API
      operationId: get_pre_signed_url
      summary: Get pre-signed URL
      description: |-
        Get details your unique URL you can use to import data into the Unit21 system.

        The response will include a URL which you must use to upload your datafile. In the example below, your datafile will be uploaded to https://local-tm-uploads.s3.amazonaws.com/.
      requestBody:
        content:
          application/json:
            schema:
              required:
                - stream_name
                - file_name
              properties:
                stream_name:
                  type: string
                  description: Stream name.
                  example: insts
                file_name:
                  type: string
                  description: File name.
                  example: custom_data.csv
                md5_hash:
                  type: string
                  description: Unique hash. Requires UUID format. Used if filename is not unique.
                  example: 352bfecf-ce8e-4c3d-64b9-ba0707fc2496
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                file_id: '166'
                form_fields:
                  AWSAccessKeyId: AKIA4GCWZN4AUYY52BAU
                  key: dev/org_unit21/1677016250000_foobar.json
                  policy: eyJleHBpcmF0aW9uIjogIjIwMjMtMDItMjFUMjM6NTA6NTBaIiwgImNvbmRpdGlvbnMiOiBbWyJjb250ZW50LWxlbmd0aC1yYW5nZSIsIDAsIDMxNDU3MjgwMF0sIHsiYnVja2V0IjogIm11bHRpdGVuYW50LXVzLXdlc3QtMi1kZXYtdG0tdXBsb2FkcyJ9LCB7ImtleSI6ICJkZXYvb3JnX3VuaXQyMS8xNjc3MDE2MjUwMDAwX2Zvb2Jhci5qc29uIn1dfQ==
                  signature: b+tguqfylMCXytxtXMwAY7jLdPw=
                url: https://multitenant-us-west-2-dev-tm-uploads.s3.amazonaws.com/
  /{pre_signed_url}:
    post:
      servers:
        - url: https://
      security: []
      tags:
        - Import API
      operationId: upload_datafiles
      summary: Upload data to URL
      description: |
        Upload your file to our S3 bucket using the pre signed AWS URL you received in the `create` endpoint.

        **PLEASE NOTE THAT THE URL FOR THIS POST REQUEST IS THE `pre_signed_url` ONLY.** YOU MUST REMOVE `https://sandbox1-api.unit21.com/v1`.

        Documentation shows an incorrect example: https://sandbox1-api.unit21.com/v1/local-tm-uploads.s3.amazonaws.com/.

        The correct URL would be: https://local-tm-uploads.s3.amazonaws.com/

        Only one file can be uploaded in a request, with a file size maximum of 300MB. Please add a waiting time of two seconds between requests.

        Use `--form file` to specify the file.

        We support JSON, JSONL, CSV format only.
      parameters:
        - $ref: '#/components/parameters/pre_signed_url'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {}
  /imports/{file_id}:
    get:
      tags:
        - Import API
      operationId: datafile_status
      summary: Retrieve datafile status
      description: "Retrieve datafile status.\n\nNote `file_id` will be included in the initial request to get a presigned_url.\n\nProgrammatically check on the status of files and take action should errors occur.\n\nFiles uploaded and processed have the following `status` value with the following definitions:\n\n  | Error code               | Definition                                                                                                                                 |\n  |--------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n  | `PENDING_UPLOAD`\t       | Customer is programmatically uploading via API, but the file has not landed (or not yet been detected as landed) in S3                     |\n  | `ADDED`\t                 | Customer manually uploaded to the UI, but has not attempted to process the file yet                                                        |\n  | `QUEUED`\t               | File is in a queue waiting to process                                                                                                      |\n  | `PROCESSING`\t           | File is presently being processed                                                                                                          |\n  | `FINISHED`\t             | The File finished successfully. Note that this does not mean all data is processed successfully as referenced by Hard error Handling below |\n  | `FAILED`\t               | File hit a hard failure case and was unable to process data                                                                                |\n\n\nHard errors refer to unprocessable datafiles, aka files that whose status end up `FAILED` are accompanied by an error code from this list:\n\n  | Error code               | Definition                                                                                                                                                                                                                                           |\n  |--------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n  | `unparseable_file`\t     | File failed to read (i.e. file contents was not actually csv or the contents use a non-traditional delimiter character)                                                                                                                              |\n  | `invalid_schema`\t       | By the stream configuration, the file had unexpected column headers or values present and thus the system did not process the data                                                                                                                   |\n  | `stream_not_configured`\t | This error means that the stream has not yet been configured with all the necessary settings to ingest the data yet. Generally this should only happen if you are testing uploaded datafiles in advance of having defined landing the data in Unit21 |\n  | `unknown`\t               | This is akin to 500 server error, and Unit21 does not have a specific known cause at this time                                                                                                                                                       |\n"
      parameters:
        - $ref: '#/components/parameters/file_id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                file_id: abc-123
                file_name: UAT2_entities_21092022.csv
                file_type: CSV
                date_created: 1623365011
                process_start_time: 1623365011
                process_end_time: 1623365011
                successful_count: 1000
                failure_count: 0
                status: FINISHED
                failure_code: null
  /imports/list:
    post:
      tags:
        - Import API
      operationId: list_datafiles
      summary: Retrieve datafiles list
      description: |
        Retrieve list of datafiles.

        Note `file_id` will be included in the initial request to get a presigned_url.

        This route will be limited to 1000 records ordered by upload time.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                created_after:
                  type: integer
                  description: Unix timestamp for the time range at which the pre-signed-url was requested.
                  example: 1623365011
                created_before:
                  type: integer
                  description: Unix timestamp for the time range at which the pre-signed-url was requested.
                  example: 1621365011
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                datafiles:
                  type: array
                  description: list of files with the same schema from the GET route.
                  example: []
                response_count:
                  type: integer
                  description: total count of files in this response payload.
                  example: 100
                total_count:
                  type: integer
                  description: total count of files over the time range specified.
                  example: 100
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: u21-key
  schemas:
    entityId:
      type: string
      description: Unique identifier of the entity. Entity IDs must be unique and only comprise of the characters -_:.@a-zA-Z0-9!#$%&*+/=?^`{'
      minLength: 1
      maxLength: 128
      pattern: '-\_:.@a-zA-Z0-9!#\$%&\''\*+/=?^`{'
      example: u-3593dece-6642-4cdc-8547-aafc1454e0a0
    entityType:
      type: string
      description: Describes a user such as `employee` or `business`. Required for new entities.
      example: user
    entitySubtype:
      type: string
      description: |
        Extra information how your organization classifies the entity. You MAY enter any value.
      maxLength: 128
      example: contractor
    objectStatus:
      type: string
      description: Status of the object on your system. You MAY enter any string value.
      maxLength: 128
      example: active
    registeredAt:
      type: integer
      description: Date in seconds since 1 Jan 1970 00:00:00 UTC (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time)).
      example: 1623365011
    Tags:
      type: array
      description: List of string tags, in the format `keyString:valueString` (note that the Key strings are NOT enclosed in `"`)
      items:
        type: string
        format: key-value pair
        example: Sector:Europe
    generalEntitiesProperties:
      title: General entity data
      type: object
      description: General information about the entity. With this object, you can link any entity on Unit21's system to a user or business on your platform.
      required:
        - entity_id
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        entity_subtype:
          $ref: '#/components/schemas/entitySubtype'
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parents:
          type: array
          description: The parent object consists of two fields─`entity_id` for parent unique identifier  and `entity_type`.
          items:
            type: object
            properties:
              entity_id:
                type: string
                description: Parent unique identifier
                maxLength: 128
                example: entity-5500
              entity_type:
                $ref: '#/components/schemas/entityType'
        tags:
          $ref: '#/components/schemas/Tags'
    userDataProperties:
      title: User data
      type: object
      description: |
        Personal data - name, birthday, SSN etc. None of the fields in user_data are required. You may send in an empty array: `"user_data": {}`.
      properties:
        first_name:
          type: string
          description: User's associated first name
          maxLength: 128
          example: John
        middle_name:
          type: string
          description: User's associated middle name
          maxLength: 128
          example: Joseph
        last_name:
          type: string
          description: User's associated last name
          maxLength: 128
          example: Smith
        day_of_birth:
          type: integer
          description: Day of user's date of birth (e.g. 23)
          example: 23
        month_of_birth:
          type: integer
          description: Month of user's date of birth (e.g. 12 for December)
          example: 12
        year_of_birth:
          type: integer
          description: Year of the user's date of birth (e.g. 1990)
          example: 1990
        gender:
          type: string
          description: MALE, FEMALE, or OTHER
          enum:
            - male
            - female
            - other
          example: female
        ssn:
          type: string
          pattern: ^\d{3}-\d{2}-\d{4}$
          description: Social security number of the user, in the format xxx-xx-xxxx
          maxLength: 64
          example: 733-99-5921
    businessName:
      type: string
      description: The registered name of the business
      maxLength: 128
      example: Acme
    corporateTaxId:
      type: string
      description: The TIN/EIN of the business
      maxLength: 128
      example: 434-455-3166
    state:
      type: string
      description: Any string representing a state such as "CA" or "California"
      maxLength: 128
      example: CA
    dbaName:
      type: string
      description: Operating name of the business.
      maxLength: 512
      example: Global Liquids
    businessDataProperties:
      title: Business data
      description: |
        Business data - business name, TIN/EIN etc. None of the fields in business_data are required. You may send in an empty array: `"business_data": {}`.
      type: object
      properties:
        business_name:
          $ref: '#/components/schemas/businessName'
        corporate_tax_id:
          $ref: '#/components/schemas/corporateTaxId'
        account_holder_name:
          type: string
          description: The name of the main person associated with the business
          maxLength: 128
          example: John Smith
        registered_state:
          $ref: '#/components/schemas/state'
        registered_country:
          type: string
          description: Country where the business is registered.
          maxLength: 2
          example: US
        doing_business_as:
          $ref: '#/components/schemas/dbaName'
        website:
          type: string
          description: The website or associated URL for the business
          maxLength: 612
          example: www.google.com
    State:
      type: string
      description: Any string representing a state such as "CA" or "California"
      maxLength: 128
      example: CA
    documentDataProperties:
      type: object
      description: document data properties
      required:
        - document_id
        - document_type
      properties:
        document_id:
          type: string
          description: The id or number of the document
          maxLength: 128
          example: G3352403F
        document_type:
          type: string
          description: The type of the document (i.e. drivers license)
          maxLength: 128
          example: drivers_license
        state:
          $ref: '#/components/schemas/State'
        country:
          type: string
          description: Can be full country name or abbreviation.
          maxLength: 128
          example: US
        issued_at:
          type: integer
          description: Date when document was created, in seconds since 1 Jan 1970 00:00:00 UTC (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time))".
          example: 1572673226
        expires_at:
          type: integer
          description: Date when document expires, in seconds since 1 Jan 1970 00:00:00 UTC (i.e. in [Unix time](https://en.wikipedia.org/wiki/Unix_time))".
          example: 1572673227
    documentDataArrayProperties:
      title: Document data array
      description: Array of document data objects.
      type: array
      items:
        $ref: '#/components/schemas/documentDataProperties'
    instrumentId:
      type: string
      description: Unique identifier of the instrument. Intrument IDs must be unique and only comprise of the characters -_:.@a-zA-Z0-9!#$%&*+/=?^`{'
      minLength: 1
      maxLength: 128
      example: 3234-sdghfdf-3332
    instrumentIds:
      properties:
        instrument_ids:
          type: array
          description: List of unique instrument IDs.
          items:
            $ref: '#/components/schemas/instrumentId'
          example:
            - instrumentA
            - instrumentB
    phoneNumbers:
      type: array
      description: List of phone numbers associated with the entity in [E.164 format](https://en.wikipedia.org/wiki/E.164)─e.g. +12125551395 ( '[+][country code][area code][local phone number]' )
      items:
        type: string
        example: '+14159627132'
    communicationDataProperties:
      title: Communication data
      type: object
      description: An entity's associated means of communication, like emails and phone numbers.
      properties:
        email_addresses:
          type: array
          description: List of emails associated with an entity.
          items:
            type: string
            example: JohnJay@example.com
        phone_numbers:
          $ref: '#/components/schemas/phoneNumbers'
    ipAddressSimple:
      title: IP address
      type: string
      description: Either IPv4 or IPv6
      maxLength: 128
      example: 255.255.255.255
    clientFingerprintSimple:
      title: Client fingerprint
      type: string
      description: A Unique address
      maxLength: 128
      example: 5454-ahfd-4531d-f4il
    digitalDataArrayProperties:
      title: Digital data
      description: Associated digital properties - IP, device, browser, client info etc.
      type: object
      properties:
        ip_addresses:
          type: array
          description: List of IP addresses. MUST be in either IPv4 or IPv6 format.
          items:
            $ref: '#/components/schemas/ipAddressSimple'
        client_fingerprints:
          type: array
          description: List of unique addresses.
          items:
            $ref: '#/components/schemas/clientFingerprintSimple'
    City:
      type: string
      description: Associated city (max 128 characters)
      maxLength: 128
      example: Redmond
    zipCode:
      type: string
      description: Associated ZIP code or postal code. For US addresses, can be either 5-digit ZIP Code (99999) or ZIP+4 Code (99999-9999) formats
      example: 07710-0001
    Country:
      type: string
      description: Country of primary residence such as "USA", "United States", "US", "The United States of America"
      maxLength: 2
      example: US
    locationDataProperties:
      title: location data properties
      type: object
      description: Address/location data
      properties:
        type:
          type: string
          description: A string field indicating the type of address e.g. `SHIPPING`, `BILLING` (max 24 characters)
          maxLength: 24
          example: SHIPPING
        building_number:
          type: string
          description: Building number of the primary residence (max 24 characters)
          maxLength: 24
          example: 6c
        unit_number:
          type: string
          description: Flat/unit/apartment number of the location associated with the event (max 24 characters)
          maxLength: 24
          example: 22a
        street_name:
          type: string
          description: Street name of primary residence (max 128 characters)
          maxLength: 128
          example: California Ave
        city:
          $ref: '#/components/schemas/City'
        state:
          $ref: '#/components/schemas/State'
        postal_code:
          $ref: '#/components/schemas/zipCode'
        country:
          $ref: '#/components/schemas/Country'
    locationDataArrayProperties:
      title: Location data array
      description: Array of location data objects.
      type: array
      items:
        $ref: '#/components/schemas/locationDataProperties'
    riskScoresProperties:
      title: Risk scores
      required:
        - name
        - score
      type: object
      description: Third party risk score information
      properties:
        name:
          type: string
          description: Name of risk score
          example: risk_score1
        score:
          type: integer
          description: Risk Value assigned to entity
          example: 65
        denominator:
          type: integer
          description: |
            Number by which `score`can be divided. If no value is given, Unit21 sets the denominator as 10^n, where `n`is the number of characters in the value. E.G. a value of 50 has a denominator of 10², a value of 501 has a denominator of 10³.
          example: 100
    customDataProperties:
      title: Custom_data
      type: object
      description: Any custom information that you wish our system to associate with this object  (accepts any valid JSON object -- up to 3 layers deep -- in key:value format --  `string:string`, `string:int`, `string:bool` -- no arrays)
      example:
        internal_notes: Reviewed by Mitchell on 31 June 2019
        reviewers: 3
        login: 1638384860
        timestamp: '2012-03-40 05:12:41.000Z'
        daily_email: true
        employees:
          - John
          - Anna
          - Peter
        socure_device_session_id: '12121212121212112'
        CITY: Philadelphia
        CURRENT_SIGN_IN_IP: 23.24.34.1
        DEVICE_INFO: 'Carrier: Metro by T-Mobile, Mac address: dc:9b:d6:7f:6d:40, Device name: TCL 5007Z'
        PREVENT_LOGIN_REASON: Login Not blocked
        SUSPENDED: 'TRUE'
      additionalProperties: true
    relatedEntity:
      type: object
      description: Filter to narrow down entities in export
      properties:
        entity_id:
          description: Unique identifier of the entity. Entity IDs must be unique and only comprise of the characters -_:.@a-zA-Z0-9!#$%&*+/=?^`{'.
          type: string
          example: roster-1894
        relationship_id:
          description: Description of the relationship.
          type: string
          example: friend
        entity_type:
          $ref: '#/components/schemas/entityType'
    relatedInstrument:
      title: Instrument
      description: Top-level data about an instrument relationship.
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
        relationship_id:
          description: Description of the relationship.
          type: string
          example: friend
    relationshipsDataProperties:
      title: Relationship data
      type: object
      description: An entity's associated intruments and entities (also called relationships)
      properties:
        parents:
          type: array
          description: List of parent entities.
          items:
            $ref: '#/components/schemas/relatedEntity'
        children:
          type: array
          description: List of children entities.
          items:
            $ref: '#/components/schemas/relatedEntity'
        undirected:
          type: array
          description: List of undirected entities.
          items:
            $ref: '#/components/schemas/relatedEntity'
        instruments:
          type: array
          description: List of associated instruments.
          items:
            $ref: '#/components/schemas/relatedInstrument'
    workflowId:
      type: string
      description: |
        A unique identifier defined during workflow creation. **Default**: none
      example: sanctions_check_1
    synchronousResponse:
      type: boolean
      description: |-
        **Default**: `false`. If `true`,  the APU immediately executes the workflow, and sends the verification result with the API response. If `true` and the workflow doesn't allow synchronous responses, the API returns an error.
        **Note**: Using synchronous calls may cause the API to return a `423` error. If that happens, try switching `synchronous_response` to `false`.
      default: false
      example: false
    includeFullResponse:
      type: boolean
      description: Include the full, raw, verification results. Can be used only if `synchronous_response` is `true`. Default is `false`.
      default: false
    socureKey:
      type: string
      description: Socure API Key
      example: 4543h90fdm3-02r8fgdgfd-78gf7tdg
    resolveGeoIp:
      type: boolean
      description: 'If `false`, does not resolve the geographic location from the provided IP. If `true` and `digital_data.ip_addresses` is empty, Unit21 ignores the field. **Default**: `true`'
      default: true
      example: true
    mergeCustomData:
      type: boolean
      description: 'Only relevant for updates/upserts, ignored otherwise. See [custom data merge strategy](https://docs.unit21.ai/reference/how-data-merges-on-updates#custom-data-merge-strategy) for more details. **Default**: `false`'
      default: false
    upsertOnConflict:
      type: boolean
      description: 'If POST request includes an object that already exists when  `upsert_on_conflict` is `false`, API returns a 409 error code and the object is not overwritten. **Default**: `true`'
      default: true
      example: true
    entityOptionsProperties:
      title: Entity options
      type: object
      description: Options for specifying workflows and list merge strategies.
      properties:
        identity_verifications:
          type: object
          properties:
            workflow_id:
              $ref: '#/components/schemas/workflowId'
            run_verifications:
              type: boolean
              description: 'Whether or not to execute a verification workflow for the uploaded entity/entities. **Default**: `false`'
              default: false
              example: false
            synchronous_response:
              $ref: '#/components/schemas/synchronousResponse'
            include_full_response:
              $ref: '#/components/schemas/includeFullResponse'
            socure_override_api_key:
              $ref: '#/components/schemas/socureKey'
        resolve_geoip:
          $ref: '#/components/schemas/resolveGeoIp'
        merge_custom_data:
          $ref: '#/components/schemas/mergeCustomData'
        upsert_on_conflict:
          $ref: '#/components/schemas/upsertOnConflict'
    createEntityRequest:
      title: Create a user
      required:
        - general_data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesProperties'
        user_data:
          $ref: '#/components/schemas/userDataProperties'
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
        instrument_ids:
          $ref: '#/components/schemas/instrumentIds'
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        risk_scores:
          type: array
          description: Set of risk scores.
          items:
            $ref: '#/components/schemas/riskScoresProperties'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        relationships:
          $ref: '#/components/schemas/relationshipsDataProperties'
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
    createEntityResponse:
      title: Entity create response
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
    errorCode:
      type: string
      description: Error message
      example: resource_not_found
    errorResponse:
      title: Error general response
      properties:
        error_code:
          $ref: '#/components/schemas/errorCode'
    message:
      type: string
      description: Detailed message
      example: Entity already exists
    messageResponse:
      title: Message general response
      properties:
        message:
          $ref: '#/components/schemas/message'
    createEntityDirectRequest:
      title: Create a user
      required:
        - general_data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesProperties'
        user_data:
          $ref: '#/components/schemas/userDataProperties'
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
        instrument_ids:
          $ref: '#/components/schemas/instrumentIds'
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        risk_scores:
          type: array
          description: Set of risk scores.
          items:
            $ref: '#/components/schemas/riskScoresProperties'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        relationships:
          $ref: '#/components/schemas/relationshipsDataProperties'
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
    generalEntitiesListProperties:
      title: General entity data
      type: object
      description: General information about the entity. With this object, you can link any entity on Unit21's system to a user or business on your platform.
      required:
        - entity_id
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
        entity_type:
          $ref: '#/components/schemas/entityType'
        entity_subtype:
          $ref: '#/components/schemas/entitySubtype'
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        continuous_monitoring:
          type: boolean
          description: Is continuous monitoring turned on for this entity?
          example: false
        parents:
          type: array
          description: The parent object consists of two fields─`entity_id` for the parent's unique identifier and `entity_type`.
          items:
            type: object
            properties:
              entity_id:
                type: string
                description: Parent unique identifier
                maxLength: 128
                example: entity-5500
              entity_type:
                $ref: '#/components/schemas/entityType'
        children:
          type: array
          description: The children object consists of two fields─`entity_id` for the child's unique identifier and `entity_type`.
          items:
            type: object
            properties:
              entity_id:
                type: string
                description: Child unique identifier
                maxLength: 128
                example: entity-5500
              entity_type:
                $ref: '#/components/schemas/entityType'
        tags:
          $ref: '#/components/schemas/Tags'
    createdAt:
      type: string
      description: Epoch
      example: 1661620487
    media:
      type: string
      description: Base64 encoded media file
      example: iVBORw0KGgoAAAANSUhEUgAAAEAAAABAEAYAAAD6+a2dAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAABmJLR0QAAAAAAAD5Q7t/AAAACXBIWXMAAABgAAAAYADwa0LPAAAAB3RJTUUH5QgVAAwND+7/TAAAE8ZJREFUeNrtXXtcVNX2/64zg7wGMt+pSIqPn2beJK9eFXyUmqYo3kBnIJ0BEkzjliW+RcUXQmVmqfiAQYThoan5SrB8YCbaT8tK84mIim9TZnjOnH3/gH3wDhFvsI98/+Gzz9lnzV57rbP22t+9zwZoQAMa8OyC6rsBZYGJ/pP8J1lYGNILns+OHTSIwmgLYdQopDN/dqRHD7aDLcAXXbvSu5SIC9bWbAVaYbadHW7DFylZWZSCxcw3PR2fYjU6p6WhHzuG+ykpNomW/vYh335LwvoN6zcUFta3nvWNp8YBHtz3n+Tp8dxzlgn5Snm3997DEjjitw8+YBdoCRo1a1ZjP3QbQdiZlUX5LB7e69blpRv/EKw++6zpyNjVsasfP67vfqhr1LsDZIdofvBa8e9/CwtxSwxau5Y9xk7ybtFCaqCGRbGw8+exho7glE6H3WhLg06epBtitvGdn38uCDSGWVjk5PD6lj9af4d59vbiOmOWaNe1a9FzffpgChsAZ5WKacmHZnTpIjXgMlLR/OZN1h4udPeDD+zstdFxuqSk+u6XukKdOwBjC9gCJgg5URlXLjz+/HM2DosxeepUqcJMtGFTjh9nr4jzhKYzZ9pN2mwd1+3IkZr6/ewAzVJle1dXasLm0KzwcMwlHxzq00fqkL6sO51YudLmTE5aoXNQEFFSUlKSyVTX/VRXqDMHYMzT09NTJssJsrWRLdbp2EIQLfL0xA4WhaD8fNZNWEYB06Yperab0+lERATRIlpEolh77QEAotwuaqbcFBAgrqBY+nXVKgzFAdxq1Ijc4cxWxsfbpDgGdmnp7c3bo7+smaGyGToUD9gKrPT2pq9wkbn2789eQifKc3CALcUihgjJWIhD169jOi7g/NGj5E7e9EJcnM2ZKF3c5eRkopJW1CfqzAEMHmqmzPzss6IQ/P77NAL/wf2HD8VVtA+OY8faOUfN1W04fLi+OiJ7w8Rcr7MDBghrhJfYz9u3s1QMwNdNmuAci8Kg6GiKJU906NCBLYECka6uVf6hyViLSz/8wM4yK7zj62t3Kpp0Ab//Xl9617oDZD/WqL1Unp4kgBgSE5GCIWhVUCA2oRnst8GD7QdG3YxPPnasvjqgVHuLHYGaCdvYhpQUHhGkDrPHGBZ7545oYu5Ea9cKOdCQ965dhYWFhcCVK6JJYVtYIIpWfY2NZSM6dRL/YMdph5sbycUoNJoyhSe1NAOZLCQ7W/ySHWAdR4+2o2hKoEOH6lrfWnOA+3u8A70D7e0t21rsFencOTjBFXdbt2a56Adh6lS75lp/XeyaNXWtcEWRfcpnqdc/332XOrOLrOOaNTjDghFgNMomCS5sWYcO1r9F3YxPzsysqLyHTM3UrHFji1H0SYFLVBQS8CvaubvTVIxAxuPH4i9sHNR9+tR1RBBqS7BVhtxdfD4wkBseX2AqTp04oWim9dfFrl1bVwpWFTwX4e1GDwpBhFwuThVj6F8TJ1ZW3vMUTdH0xx+2uw1pxtYeHhhKyZi0fTv7EvvgaG9PbagbGm/axHOTutKzxh2AiZ4enh6NGrE3qBU+Lsnu2UzWS/x95synJfkpDzzpY03F7rQ9KEjSo1gvJi5gA5lcXnm5RbMK4778QbTRz48PKdChD3b062e4opmhshkypK70rHEHMKTbdpDvHTgQLRGOMS+8wOfx9TXGVRd8GkqzcQc3L17keuXMTd/eauvQoVWV27hxXFxc3MOHPJeQblxCR7bYy6uu9Kv5IaA5G029hg3jRdYLyyjrq6/qSqHaAkugbNjrdNKF3XRFNqvqDsAhHBGGizZff83LpEMHatOvX13pVekQxscoPdRsPBs4kOKxTnCYOBFjqTtGv/oqUjGfbe3aFX3hiDYAHpCSQak0RGqUqkf29uIrFI/pSUn1Pe2rLCiUabElLY0BizEZgJpai9t698Z0AK9UXW7ux9TD9r2LF6107G7udYB9gS3Y2bmz/guNRqV6YqhciE741WCgX3APL2ZmsubIx4zUVIynmbQmMVHhFuUYpztwoNJ6VbTi4yu+Qd43unSRzTCFie9HRDAt+cBi4MAqa56P+ViXnGw6L9shWzh16nP9Nn20ZeWlS1XvytpFLlOz8ezFF00G8hG80tMRhKP4/coVxVrtJd1pJ6eqyr3n5hvkG2RnZ6UT7+Zer/paBGlYFAoPHzb9SlewadIk+9+1TrrnLl4s77lyh4BsZ9/2qggXF9kU8ZFJOH6cG54nL7SZTUCnefNIw6JobM+etramvfJvFYqC/EYWxsLGjQUf9DOt690bwbjMei5bRp3ZPBTcuwdLLMbkYcPkHsYxpms//JArm+iuOtO3b+2ZsHqwQjQlUEaGrS2LahRnbV1dw3NYDzR+mePdsSMvU18cY2vPnlUotFqdjoj/5f1K68RENtPZmb4hHXtv/nxuB24XWXM8gmdaGqe8q9ywRxPVzcd/7+RkUGsSVP0ePdLri0KSYbpGrfw9MZF7bmXl8vmwPlKzRxWxe7ckd7jGX5n18GHuAb9WXmcdHWvNkk8ZDIc1g73azp/P+0EfovlZuWnjxoo+z+1gWKI+rTqTlCT1Z09NB5Xu/v1Hx/w+eXtaiYOZo8wcQN6DVpFtdDSbXDxPXQjGFiQl2YRro+P/b/x42+LpXM4wn95eKWPGMHsxjUVMm8ZepGU436uX4mPtXN0vCoW5XD4fLloUGj3asPJq2/NNdu5kW2klfThqlCna1IZ5BgcDuAX4+envay6rHu3fzyNGmT1xm0Vh5/79Cqdo0uUMH25+W++m6apK+P57Pt2qaAdTGAvCvaNHbUOiX9KllLxRvKMrKoe/yebX2QbsZS9YWsKCZSHAaGQ3SAef6OiKym22KzI8Mjw7m32NcISPG5ezVH1adSYxkaUSsNzDQ/5vU7bpow0bAAArBw82f77UEKAPVS8dn/H662wykmlF//48xOSeF1rYbPLz4/N4/S41U84KDRW/Yt1Y5I4dUk6wEBfR3da23I4tnmeLuWxBo1iNhnaxUdTlnXds33X88ebYgAC+P6Bcw3O0JB+MeeMNzkCWul9Jw0sGmkHhaObiUtnnKgrFFq217uS8eSbIt8t2du1qF6GdG5+emlpZOdwueT2NkcIGPz9qjRt4++5d9hWu4pNBg7hdyxXEQ5AUStaov1UFz53L7/M3XgpZ2zVbVNPy8w2d1dOVj2fMyOnsG6Tc1Lp1dTtG/7bvrfFDu3eX2tFPc0O17+xZ83qGNzTTVG7nzkntaaEerHJ76aVS8vj9Cr65tV2/tlFqaBnuY6vcFhFhXq9UBKC7mE2bBwyQLiyRuYm63bt5kYd6qf6n6Ea3g4NtL0R/HG8fFmZzITI83u/mzeoqQHmmlhTZtq30u7uQh36luXe2BzfRteQ6tRRa0dmS555ZnBTTxN0ldiPG/En7hF2LUXoW8BhqFLZsyYuGlVZa8R+XL0v3O+AK+rz6qlReYvQSTm3eXOMKBArDae8ThvwSerb1TxZfInAJ/3ri+hzxLUwo3wHM39in7Q2uLnIPy6faxD4xrf4Hew8DSvdLKQdg7TELm0s4bmFL3km79mUvTtCkRm7GoJpfvBAHiN/A/4kGf4iVdMDPr5Sh1HgZSb6+0nNKvMUWODjUVDtoHvTwrfyYXN+gyfl5+XlP2EVP/sy9tGOXmgVQMo7iYkYGm465QNeu1pamsLx/OjkBCAd++gk/UQwG//gjAODUoEGspagSvp0wARcQDqxYUWMKrKFe2O7gADVertRzi+kMiyw/ApSVlf8pdBWq9VTB6pxsk8nPyYkNxDhaAeAnbKZL168DaPNkvdIRIJB9jUnHj0sXlIKV2GbUKF6kg7iD3E8/lep/iLOsZUiIwVVzystr5syaSgKhRCJeLzEk9aV8OjF8uDlBUrTYNGKE9Jw360GBDTkA3qSP6Es3N15k9tSZ5ZSOZKV5gN6Ujgd80cPHB+NYPPoGBt5z8z3mG7Rqlc2uyPBI11279MEaV2XYsmUIAej0nDlsKA4whIYyiKADoaF6aDQqVcXba/5GkhuscMzBgSUXlcVodKc3MzPhDGB1yXPsCF6jKZmZAByhAMidurCbxUNA49rr3/JyBfP7lYo41YA0fX45X40HgYG4gCVoBKAZu0ehCQkArJ+sXyoCKJy0YbqclBTOLfNt2tZ9TF65EyIj+WKQ4lNtavyMuXPpDxpNEW5u9DptZqsPHqQQNh/Oen11FWFhSESbkvl8oaPF1YKsGzfM6xWcs+xotLx+XXpuLd6la889V9sd/bSB28Vyb0GabHpkpLT1rNguRXzDd99VWCBf/DG4ak6phj14IM3HiynHMgmXGkZFKeeqUtN/d/A33hCj6aE8vm1bZangckOStFt2m/C++PzOnWwrCujDxo0504RdMFLA6tUANTLd37PHcMvaTxx54UKL8WvGJW2tfiRoQBHuJExJ9PRQKGxb5W4S9nTujOZib+HtUaMwBGo8CAyU3nhXHMHoBw/E3vBjc9zdy2MWKzwmcU+SbzQNMwZu2sQ+xyc0tzSx0ID6AQ/1xpVCuHypv39Fl9ernJTod/lkeKmGDEECW8GmjBtHd2GJMFdX9jKa4aqDQ0XXBBpQMUi51VGyQvfMTCmrL07uKj3G1xdqi3H7u3L99c1A1tq28Ab8PdDgAM84GhzgGUeDAzzjaHCAZxwNDvCMo8EBnnE0OMAzjgYHeMZR4W8D81wntJjQon17k6VsXuGZZcvwHRzQ4rXXoMAa2keExywUP+3fL5spNKPfFiywWhHlGBd35Up9K9iAv0a5DsC/EDL9QgrjtRMn2D6comlNmgA4VVyleIsRrQbeftt4mwWxna+/ngefDC8vF5cGR3i6Ue4QIO+MZMEuNFQ6NCkRnhi0Z4+wUvzAaGzbVrgp7yk0c3DACdpGW/ft49/PGz3EdmxgcHBtK1DqG7if8A/MLr1x5O8O6VM9qP9ftTQmxmCvGarac+eOQdBsV4q3bxuGaD5X3tLpeKSuqNzyh4A1sMOiQYPwAYBGgOAivyT8OnmyTeeNI5OSbtzA/KJquS/5tFYOCwgwpQGEa9fQlXxwSK0uWuRQq8sSXwOLIP/7BexRloO8WtimXk/Im+mT4eXVoYPRn+nZ0NRUtqboBQPQBr8CAHbSFl5bqTQ5y6YXXho6NG+mz3ivyb17lxeBay4JHGlMNdnX3dk2Evgb/wXrhGnLl9vOyDltDFu4sMZ/p/hEUV7kX03XtnpSJC2OrEjGjzi8dy+PvOYRmJ3CWQpo2tRkYsFicGhoefLLNRj/Glg62LH4h4S2siU02d+fNuaPKsgSBFOA0EG+d/16/o0evkc/1kurVbyh9Y//yMeHy6uvzZLmqGw79JGaPSrH5csxDknoN2tWXbeXgxvcpvPG92NXl+yFLIrADg6mNDaMml67xnds2T7WpuhGlhy9a45yhwCZjEKEkFmzTM4sQYx47TV2igEYMUKE8TS7l5mJYNlpuUVx5TGQ3hT5EtNeixUhIfXVUTUNW40hyvjPBQsMWlsf+TEAr+I/GDNxonQK2t8U5ToAH0NymZqNj+3VS3QiZ4pZuhRXEcyEIUOYnrmTL2PIIobE/fvlcZRJ7osWWaXGOMbcSU+vbwVrCiQkbU3aWlAAYCswezYA4PPZswFcro7c8iKR/qSaqSK0Wp5TiddN89i69etzLryzyjvQ35/GmlaYzhOZYthUGrx+PYCLOAPAH62Z06FD+Pivf7/CPIA1RVMCXb1aVPL2BjAWAGDzJ5Xjas0OzxzkH4ot5fMXLTJqZQeN+mHD0JuBeTwRgdMwjJoCKDY8P4FFNkGwEEJmzQLwl2cNNDCBTzmsUmPuxNxJT5evJwW5u7igEHLaHxMDgUXB8vZt6aieHvgZMXFxwma5Cy3u1aui/EulTwlrQP1AMugKAJg4EcBGaItvagFwU1fyiMmGCPCMo0wH4IwSZ5gkxokzUMWMFCcq6luR8sDbKSVVZuDXK8uk1RckZtBDzVRZ8fGG1upLqrfu3tXf1kxRpWZl8ev8eLuy5FBZguW/kJ1w7cQJiQIuC8X/g4ePUeWNPXXNA3B9ZAvokDA0NVUiVGpIn+qisv0h2WcLrae+x46Z/4sdc5AzurGI+/cFd9NbJl9nZ+uwGKekrdeu8fulIkBtcf/1xdnLN+Mb4dDChZLhy9LnAjqhxzffSPrMYovxTS0wiuaoJMPI9ZEMX459ODMobpV5yOOXLzeXV8rTeCjh35pVlHmqtOLF1K1iVvRcXe85c2qrf/nQxTusTH1mTLjs6dGunSlYtlhukZHBs2yFTTTptK1a1Vb7qsswVpcZrHoSWFnuv644e3N0xEXoZbJy6+2Ru8oel4RieoXC2eeVPw6+suAMIxLhiWOhoeYRocowsw/bizfhUFBgXq20gl60mC09eBAo4v5LMU/m3D9QRAGXwf3/D548aqWu2PR2sEJOSkpRQamsMJNmhI5s9u+v7eZVlmHU79esV34SFYX+OEY/ajQVtQ+5sAHYdfBgqd83v8CzZdN2liCuO3GCjyFlasC5//dM2fJ4FxdOXNR2x1UU0k6m27LphZdOnixPH86kcULFesimW3HdMjLqWw9zfYxfyOyMyqNHy12L4EmtxjRYrujf39w+ZYZwPn0QnchZMP0F97++mPt/ynf+SI7Nl0nj2Hya+8TRqW9Scyi++07WlP6gwtmzn3Z9pNPL47FOcAgOJm9qxa6NHMnvs1h2i9rt2SNrLl9EyYsWPW2O3IAGNOBpwH8BnjwRGjT3j7EAAAAldEVYdGRhdGU6Y3JlYXRlADIwMjEtMDgtMjFUMDA6MTI6MTMrMDA6MDBQeAsfAAAAJXRFWHRkYXRlOm1vZGlmeQAyMDIxLTA4LTIxVDAwOjEyOjEzKzAwOjAwISWzowAAAABJRU5ErkJggg==
    mediaType:
      type: string
      enum:
        - IMAGE_PROFILE_PICTURE
        - IMAGE_DRIVERS_LICENSE_FRONT
        - IMAGE_DRIVERS_LICENSE_BACK
        - IMAGE_PASSPORT_FRONT
        - IMAGE_ID_CARD_FRONT
        - IMAGE_ID_CARD_BACK
        - IMAGE_FACE_IMAGE
      description: |
        Type of media. The dropdown contains Unit21-recognized types but all types are accepted.

        Though you can provide any string, Unit21 processes and display recognized `media_type` values with custom formatting. Unit21 can also use recognized media object types for dedicated requests, like document verification.
      example: IMAGE_DRIVERS_LICENSE_FRONT
    name:
      type: string
      description: Media file name
      example: I-9
    mediaDataProperties:
      title: media data properties
      type: object
      description: Media data. See `/link-media` endpoint
      properties:
        created_at:
          $ref: '#/components/schemas/createdAt'
        media:
          $ref: '#/components/schemas/media'
        media_type:
          $ref: '#/components/schemas/mediaType'
        name:
          $ref: '#/components/schemas/name'
    entityList:
      title: Entity
      description: Top-level data about an entity.
      properties:
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
        general_data:
          $ref: '#/components/schemas/generalEntitiesListProperties'
        instrument_ids:
          $ref: '#/components/schemas/instrumentIds'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        user_data:
          $ref: '#/components/schemas/userDataProperties'
        media_data:
          $ref: '#/components/schemas/mediaDataProperties'
    generalEntitiesPropertiesBasic:
      title: General entity data
      type: object
      description: General information about the entity. With this object, you can link any entity on Unit21's system to a user or business on your platform.
      properties:
        entity_type:
          $ref: '#/components/schemas/entityType'
        entity_subtype:
          $ref: '#/components/schemas/entitySubtype'
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parents:
          type: array
          description: The parent object consists of two fields─`entity_id` for parent unique identifier  and `entity_type`.
          items:
            type: object
            properties:
              entity_id:
                type: string
                description: Parent unique identifier
                maxLength: 128
                example: entity-5500
              entity_type:
                $ref: '#/components/schemas/entityType'
        tags:
          $ref: '#/components/schemas/Tags'
    generalEntitiesBasic:
      title: General entity data
      properties:
        general_data:
          $ref: '#/components/schemas/generalEntitiesPropertiesBasic'
    userData:
      title: User data
      description: |
        Personal data - name, birthday, SSN etc.
      properties:
        user_data:
          $ref: '#/components/schemas/userDataProperties'
    businessData:
      title: Business data
      description: |
        Business data - business name, TIN/EIN etc.
      properties:
        business_data:
          $ref: '#/components/schemas/businessDataProperties'
    documentDataArray:
      title: Document data array
      properties:
        document_data:
          $ref: '#/components/schemas/documentDataArrayProperties'
    instrumentArray:
      title: Instruments
      properties:
        instruments:
          description: Array of `instrument_id` strings
          type: array
          items:
            $ref: '#/components/schemas/instrumentId'
    communicationData:
      title: Communication data
      properties:
        communication_data:
          $ref: '#/components/schemas/communicationDataProperties'
    digitalDataArray:
      title: Digital data array
      properties:
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
    locationDataArray:
      title: Location data array
      properties:
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
    riskScores:
      title: Risk scores
      properties:
        risk_scores:
          type: array
          description: Set of `risk scores`
          items:
            $ref: '#/components/schemas/riskScoresProperties'
    customData:
      title: Custom data
      properties:
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
    relationshipsData:
      title: Relationship data
      properties:
        relationships:
          $ref: '#/components/schemas/relationshipsDataProperties'
    entityOptions:
      title: Entity options
      properties:
        options:
          $ref: '#/components/schemas/entityOptionsProperties'
    updateEntityResponse:
      title: Entity create response
      properties:
        entity_id:
          $ref: '#/components/schemas/entityId'
    linkInstrument:
      type: object
      description: Associate an instrument directly with an object, like an Entity or Case.
      properties:
        instrument_ids:
          $ref: '#/components/schemas/instrumentIds'
    linkMediaJSON:
      title: Base 64 media
      type: array
      required:
        - media
        - name
      items:
        type: object
        properties:
          media:
            $ref: '#/components/schemas/media'
          name:
            type: string
            description: name of media object
            example: logo.png
          media_type:
            $ref: '#/components/schemas/mediaType'
          custom_data:
            type: object
            description: Any custom information that you want the Unit21 system to associate with this object (accepts any valid JSON object)
            example:
              type: logo
    linkMediaForm:
      title: Form data
      type: object
      properties:
        form_data:
          description: |
            To send media through form data, set `Content-Type` as `multipart/form-data`.

            This request has three possible components:
            * A media key name, any alphanumeric string (e.g. `profile_picture` in the following code snippet).
            * A value, indicating the path to the media (e.g. the paths specified after `@` in the following code snippet).
            * Optional media metadata. Stringified JSON data, sent as a value for the media key name.

             Here's an example request. In the path, replace `<OBJECT>` with whatever endpoint you want to reach, e.g. `entities`, `alerts`, etc.

            ```shell
            curl -X PUT \
            'https://{url}/v1/<OBJECT>/{unit21_id}/link-media' \
            -H 'Content-Type: multipart/form-data' \
            -H 'u21-key: <YOUR_API_KEY>' \
            --form 'profile_picture=@/src/103031/images/profile_picture.jpg' \
            --form 'profile_picture={"media_type": "IMAGE_FACE_IMAGE", "source": "iPhone_selfie", "timestamp": 1572673229}'
            --form 'document_front=@/src/103031/images/document_front.jpg' \
            --form 'document_front={"media_type": "IMAGE_ID_CARD_FRONT", "source": "passport_app", "timestamp": 1572673229}'
            ```
    unit21Id:
      type: integer
      description: 'A Unit21 internally-assigned unique identifier for an object within the Unit21 system. '
      example: 1237466
    entity-unit21-Ids:
      properties:
        entity_ids:
          type: array
          description: List of unit21 IDs.
          items:
            $ref: '#/components/schemas/unit21Id'
    entityExportFilters:
      properties:
        filters:
          type: object
          description: Filter to narrow down entities in export
          properties:
            statuses:
              type: array
              description: Statuses for the entities.
              items:
                type: string
                enum:
                  - active
                  - inactive
            status:
              type: string
              description: Status of the entities.
              example: active
            rule_ids:
              type: array
              description: Numerical IDs of the rules.
              items:
                type: integer
                example: 371
            start_date:
              type: string
              description: Entity creation date start.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Entity creation date end.
              example: '2021-11-05 04:13:46'
            entity_ids:
              type: array
              description: Numerical IDs of the entities.
              items:
                type: integer
                example: 15453219
              example:
                - 3242342
                - 3423432
            internal_entity_type:
              type: array
              description: Type of entity.
              items:
                type: string
                example: employer
            entity_type:
              $ref: '#/components/schemas/entityType'
            child_org_ids:
              type: array
              description: Entities that belong to this Child Org (Numerical ID).
              items:
                type: integer
                example: 85
    csv:
      properties:
        use_csv:
          type: boolean
          description: Export as CSV file.
          example: true
    Options:
      properties:
        upsert_on_conflict:
          $ref: '#/components/schemas/upsertOnConflict'
        resolve_geoip:
          $ref: '#/components/schemas/resolveGeoIp'
        merge_custom_data:
          $ref: '#/components/schemas/mergeCustomData'
    createInstrumentRequest:
      title: Create an instrument
      required:
        - instrument_id
        - instrument_type
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
        instrument_type:
          type: string
          description: Type of instrument. Common examples include `bank`, `cash`, and `credit card`
          example: account
        instrument_subtype:
          type: string
          description: A more detailed type of instrument. Common examples include `visa`, `mastercard` or `american-express` if type is `cc`
          example: visa
        source:
          type: string
          enum:
            - internal
            - external
          description: LEGACY. If your platform owns and administers this instrument, the instrument is `internal`, otherwise it is `external`.
          example: internal
        name:
          type: string
          description: The name of the instrument, typically in a human readable format.
          example: Real Company Bank Account
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parent_instrument_id:
          type: string
          description: Unique identifier of the parent instrument.
          maxLength: 128
          example: 3234-sdghfdf-3331
        entities:
          description: List of the unique identifiers of the entity IDs.
          type: array
          items:
            $ref: '#/components/schemas/relatedEntity'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        tags:
          $ref: '#/components/schemas/Tags'
        options:
          $ref: '#/components/schemas/Options'
    createInstrumentResponse:
      title: Instrument create response
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
    instrumentList:
      title: Instrument
      description: Top-level data about an instrument.
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
        instrument_type:
          type: string
          description: Type of instrument. Common examples include `bank`, `cash`, and `credit card`
          example: bank-account
        is_spooled:
          type: boolean
          description: Is the instrument buffered?
          example: false
        source:
          type: string
          enum:
            - internal
            - external
          description: LEGACY. If your platform owns and administers this instrument, the instrument is `internal`, otherwise it is `external`.
          example: internal
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parent_instrument_id:
          type: string
          description: Unique identifier of the parent instrument.
          maxLength: 128
          example: 3234-sdghfdf-3331
        custom_data:
          $ref: '#/components/schemas/customData'
        tags:
          $ref: '#/components/schemas/Tags'
    InstrumentBasic:
      title: Instrument
      description: Top-level data about an instrument.
      properties:
        instrument_type:
          type: string
          description: Type of instrument. Common examples include `bank`, `cash`, and `credit card`
          example: account
        instrument_subtype:
          type: string
          description: A more detailed type of instrument. Common examples include `visa`, `mastercard` or `american-express` if type is `cc`
          example: visa
        source:
          type: string
          enum:
            - internal
            - external
          description: LEGACY. If your platform owns and administers this instrument, the instrument is `internal`, otherwise it is `external`.
          example: internal
        name:
          type: string
          description: The name of the instrument, typically in a human readable format.
          example: Real Company Bank Account
        status:
          $ref: '#/components/schemas/objectStatus'
        registered_at:
          $ref: '#/components/schemas/registeredAt'
        parent_instrument_id:
          type: string
          description: Unique identifier of the parent instrument.
          maxLength: 128
          example: 3234-sdghfdf-3331
        tags:
          $ref: '#/components/schemas/Tags'
        options:
          $ref: '#/components/schemas/Options'
    entityRelations:
      title: Entities
      properties:
        entities:
          description: List of entity relationships.
          type: array
          items:
            type: object
            required:
              - entity_id
            properties:
              entity_id:
                $ref: '#/components/schemas/entityId'
              relationship_id:
                description: Description of the relationship.
                type: string
                example: friend
              entity_type:
                $ref: '#/components/schemas/entityType'
    updateInstrumentResponse:
      title: Instrument create response
      properties:
        instrument_id:
          $ref: '#/components/schemas/instrumentId'
    instrument-unit21-Ids:
      properties:
        instrument_ids:
          type: array
          description: List of unit21 IDs.
          items:
            $ref: '#/components/schemas/unit21Id'
    instrumentExportFilters:
      properties:
        filters:
          type: object
          description: Filter to narrow down instruments in export
          properties:
            statuses:
              type: array
              description: Statuses for the instruments.
              items:
                type: string
                enum:
                  - active
                  - inactive
            status:
              type: string
              description: Status of the instruments.
              example: active
            rule_ids:
              type: array
              description: Numerical IDs of the rules.
              items:
                type: integer
                example: 371
            start_date:
              type: string
              description: Instrument creation date start.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Instrument creation date end.
              example: '2021-11-05 04:13:46'
            entity_ids:
              type: array
              description: Numerical IDs of the entities.
              items:
                type: integer
                example: 15453219
              example:
                - 3242342
                - 3423432
            instrument_type:
              type: string
              description: Type of instrument.
              example: wallet
    bulkExportResponse:
      type: object
      properties:
        message:
          type: string
          description: Export success.
          example: File export has started
    eventId:
      type: string
      description: Unique identifier of the event on your platform
      example: t-9daaebad-478d-4ea3-bbf9-e6320d3f1cea
      minLength: 1
      maxLength: 128
    eventType:
      type: string
      enum:
        - transaction
        - action
      description: |
        `transaction` for monetary flows, `action` for other state changes, like new logins.
      example: transaction
    generalEvents:
      title: General event data
      properties:
        general_data:
          type: object
          required:
            - event_id
            - event_type
            - event_time
          description: |
            General data is required for any request made to the v1/events/create endpoint. This defines any pieces of information that allows you to link up any event on Unit21's system to transactions or user activities on your platform.
          properties:
            event_id:
              $ref: '#/components/schemas/eventId'
            event_type:
              $ref: '#/components/schemas/eventType'
            event_time:
              $ref: '#/components/schemas/registeredAt'
            event_subtype:
              type: string
              description: |
                Extra info about how your organization classifies the event. You MAY enter any value. Useful for granular categories, e.g. if you have two types of products and a transaction can be associated with either.
              maxLength: 128
              example: payment
            status:
              $ref: '#/components/schemas/objectStatus'
            tags:
              $ref: '#/components/schemas/Tags'
    transactionData:
      title: Transaction data
      properties:
        transaction_data:
          description: |
            In addition to the required `amount` field, must include at least one of:
            * `sender_entity_id`
            * `sender_instrument_id`
            * `receiver_entity_id`
            * `receiver_instrument_id`
          type: object
          required:
            - amount
          properties:
            amount:
              type: number
              description: |
                The normalized monetary value of the transaction in customer's home currency. This value MUST be greater than or equal to zero. Direction of monetary flow should be entirely denoted by the specifying sender/receiver entities and instruments appropriately.
              example: 13562.83
            sent_amount:
              type: number
              description: |
                The monetary value of the transaction, specified in terms of the currency set in the sent_currency field. This value must be positive (greater or equal to zero). Denote by the specifying sender/receiver entities and instruments appropriately.
              example: 13562.83
            sent_currency:
              type: string
              description: The currency that the sender sent
              maxLength: 128
              example: USD
            sender_entity_id:
              type: string
              description: |
                Identifier of the sender entity on your platform.
              maxLength: 128
              example: u-371b5091-da30-48a8-936b-7600f9983e80
            sender_entity_type:
              type: string
              description: |
                The entity type of the sender as defined in Entity's `general_data` section.
              example: user
            sender_instrument_id:
              type: string
              description: |
                Identifier of the sender's transaction instrument on your platform.
              maxLength: 128
              example: instrumentA-3967112
            received_amount:
              type: number
              description: The monetary value of the transaction, specified in terms of the currency set in the `received_currency` field. This value must be positive (greater or equal to zero). Direction of monetary flow should be entirely denoted by the specifying sender/receiver entities and instruments appropriately.
              example: 13562.83
            received_currency:
              type: string
              description: The currency that the receiver party received
              maxLength: 128
              example: USD
            receiver_entity_id:
              type: string
              description: Identifier of the receiver entity on your platform
              maxLength: 128
              example: u-d8e1d453-c205-4996-a935-ff08be01bcd1
            receiver_entity_type:
              type: string
              description: |
                The entity type of the receiver as defined in Entity's general_data section.
              example: business
            receiver_instrument_id:
              type: string
              description: |
                Identifier of the receiver's transaction instrument on your platform.
              maxLength: 128
              example: t376839428256371
            exchange_rate:
              type: number
              description: |
                If both `sent_currency` and `received_currency` are defined, and neither of them are in the home currency, then this is defined as `sent_amount/received_amount`.  If either `sent_currency` or `received_currency` are in the home currency  (but not both), then `exchange_rate` is defined as  `home_currency_amount/non_home_currency_amount` (i.e exchange rate to USD). If both `sent_currency` and `received_currency` are in the home currency,  this is not required.
              example: 1.0012
            transaction_hash:
              type: string
              description: Used for chainalysis. Chanalysis transaction hash.
              example: af830da0919f9d3ebbc413040460708c4107e77c83c1d1a56c6bc76a48d
            usd_conversion_notes:
              type: string
              description: Readable information associated with the exchange rate(s) used, e.g. when the exchange rate was pulled, from what source it was obtained
              example: pulled from forex.com at 1572672226
            internal_fee:
              type: number
              description: |
                The sum of all internal fees associated with the transaction, specified in USD. Internal fees are collected by your platform e.g. if users pay a fee to you for facilitating a transaction from user to user. All other field amounts should not include the value of these fees.
              example: 5
            external_fee:
              type: number
              description: |
                The sum of all external fees associated with the transaction, specified in USD. External fees are paid out to external parties independent of your platform e.g. payment network fees, shipping fees, cleaning fees. All other amount fields should not include the value of these fees
              example: 5
    actionData:
      title: Action data
      properties:
        action_data:
          type: object
          description: |
            Information about any notable actions that a user takes on your system. Examples of actions that may be worth tracking are:
              * Password changes from new IP addresses
              * Logins from disparate locations
              * Linking or unlinking instruments at an unusual frequency
              * Finding users frequently using referral codes, potentially signally fake referral schemes.

            Action events only require `entity_type` if the entity referenced doesn't already exist in the system (and hence a placeholder entity needs to be created).
          required:
            - entity_id
          properties:
            action_type:
              type: string
              description: |
                A keyword (of your choosing) that describes an action event, e.g. `LOGIN`, `SIGNUP`, `PASSWORD_RESET`.
              maxLength: 512
              example: LOGIN
            action_details:
              type: string
              description: Extra information that provides more context about the event.
              maxLength: 4096
              example: Through mobile app v0.8.8
            entity_id:
              type: string
              description: Identifier of the entity on your platform that is associated with this action event─should correspond to the `entity_id` field in an [entity's `general_data` section](ref:create_entity).
              maxLength: 128
              example: 371c4d7b-0563-4685-aab1
            entity_type:
              $ref: '#/components/schemas/entityType'
            instrument_id:
              type: string
              description: Identifier of the transaction instrument on your platform that is associated with this action event - should correspond to the `instrument_id` field in an [entity's `instrument_data` section](ref:create_entity)
              maxLength: 128
              example: 238938823-34347686-39405443
    digitalData:
      title: Digital data
      properties:
        digital_data:
          description: Associated digital properties - IP, device, browser, client info etc.
          type: object
          properties:
            ip_address:
              $ref: '#/components/schemas/ipAddressSimple'
            client_fingerprint:
              $ref: '#/components/schemas/clientFingerprintSimple'
    locationData:
      title: Location data
      properties:
        location_data:
          $ref: '#/components/schemas/locationDataProperties'
    eventOptions:
      title: Event options
      properties:
        options:
          type: object
          properties:
            monitor:
              type: boolean
              description: Whether or not to monitor this event (defaults to `true`). Typically used to signal Unit21 to not flag such events or include them in calculations i.e. to prevent double counting, or to ignore applying monitoring to unimportant events that you still want to associate with users
              default: true
            resolve_geoip:
              $ref: '#/components/schemas/resolveGeoIp'
            link_digital_data_to_entity:
              type: boolean
              description: Whether or not to link the included `digital_data` with the related entities. Includes geoip information if resolve_geoip is enabled as well. On action events, defaults to `true`
              example: true
            linked_entity:
              type: string
              enum:
                - sender
                - receiver
                - both
              default: both
              description: Possible values are `sender`, `receiver`, and `both`. Defaults to `both`. If `link_digital_data_to_entity` is flagged on transaction events, this specifies which entities to associate the `digital_data` to. If there is no `digital_data` or entities, no exception is thrown.
              example: sender
            merge_custom_data:
              $ref: '#/components/schemas/mergeCustomData'
            upsert_on_conflict:
              $ref: '#/components/schemas/upsertOnConflict'
    createEventResponse:
      title: Events/create response
      properties:
        event_id:
          $ref: '#/components/schemas/eventId'
    rtrEventResponse:
      title: Events/create response
      properties:
        evaluation_id:
          type: string
          description: The ID of the execution
          example: 9be1c429-f3ce-413a-9775-f27d2018a3d8
        endpoint:
          type: string
          description: The endpoint name
          example: /evaluate
        timestamp:
          type: integer
          description: The timestamp the event was received
          example: 1674594517.649061
        event_id:
          $ref: '#/components/schemas/eventId'
        rule_executions:
          type: object
          description: All of the RTR rules ordered by ID that ran against this event and their reponses
          properties:
            rule_id:
              description: The ID of the RTR rule
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - PASS
                    - FAIL
                    - ERROR
                  description: '`PASS`, `FAIL`, or `ERROR` response'
                  example: PASS
                rule_name:
                  type: string
                  description: The name of the RTR rule
                  example: Check Risk score rule
          example:
            '1166':
              status: FAIL
              rule_name: High risk senders
            '1170':
              status: PASS
              rule_name: Velocity - 10K ACH in the last 4 hours
            '1291':
              status: FAIL
              rule_name: New Account Fraud - Risk:88
    event:
      title: Event
      description: Top-level data about an event.
      properties:
        event_id:
          $ref: '#/components/schemas/eventId'
        event_type:
          $ref: '#/components/schemas/eventType'
        event_time:
          $ref: '#/components/schemas/registeredAt'
        event_subtype:
          type: string
          description: |
            Extra info about how your organization classifies the event. You MAY enter any value. Useful for granular categories, e.g. if you have two types of products and a transaction can be associated with either.
          maxLength: 128
          example: payment
        status:
          $ref: '#/components/schemas/objectStatus'
        tags:
          $ref: '#/components/schemas/Tags'
    transaction:
      title: Transaction
      description: Top-level data about a transaction.
      properties:
        amount:
          type: number
          description: |
            The normalized monetary value of the transaction in customer's home currency. This value MUST be greater than or equal to zero. Direction of monetary flow should be entirely denoted by the specifying sender/receiver entities and instruments appropriately.
          example: 13562.83
        sent_amount:
          type: number
          description: |
            The monetary value of the transaction, specified in terms of the currency set in the sent_currency field. This value must be positive (greater or equal to zero). Denote by the specifying sender/receiver entities and instruments appropriately.
          example: 13562.83
        sent_currency:
          type: string
          description: The currency that the sender sent
          maxLength: 128
          example: USD
        sender_entity_id:
          type: string
          description: |
            Identifier of the sender entity on your platform.
          maxLength: 128
          example: u-371b5091-da30-48a8-936b-7600f9983e80
        sender_entity_type:
          type: string
          description: |
            The entity type of the sender as defined in Entity's `general_data` section.
          example: user
        sender_instrument_id:
          type: string
          description: |
            Identifier of the sender's transaction instrument on your platform.
          maxLength: 128
          example: instrumentA-3967112
        received_amount:
          type: number
          description: The monetary value of the transaction, specified in terms of the currency set in the `received_currency` field. This value must be positive (greater or equal to zero). Direction of monetary flow should be entirely denoted by the specifying sender/receiver entities and instruments appropriately.
          example: 13562.83
        received_currency:
          type: string
          description: The currency that the receiver party received
          maxLength: 128
          example: USD
        receiver_entity_id:
          type: string
          description: Identifier of the receiver entity on your platform
          maxLength: 128
          example: u-d8e1d453-c205-4996-a935-ff08be01bcd1
        receiver_entity_type:
          type: string
          description: |
            The entity type of the receiver as defined in Entity's general_data section.
          example: business
        receiver_instrument_id:
          type: string
          description: |
            Identifier of the receiver's transaction instrument on your platform.
          maxLength: 128
          example: t376839428256371
        exchange_rate:
          type: number
          description: |
            If both `sent_currency` and `received_currency` are defined, and neither of them are in the home currency, then this is defined as `sent_amount/received_amount`.  If either `sent_currency` or `received_currency` are in the home currency  (but not both), then `exchange_rate` is defined as  `home_currency_amount/non_home_currency_amount` (i.e exchange rate to USD). If both `sent_currency` and `received_currency` are in the home currency,  this is not required.
          example: 1.0012
        transaction_hash:
          type: string
          description: Used for chainalysis. Chanalysis transaction hash.
          example: af830da0919f9d3ebbc413040460708c4107e77c83c1d1a56c6bc76a48d
        usd_conversion_notes:
          type: string
          description: Readable information associated with the exchange rate(s) used, e.g. when the exchange rate was pulled, from what source it was obtained
          example: pulled from forex.com at 1572672226
        internal_fee:
          type: number
          description: |
            The sum of all internal fees associated with the transaction, specified in USD. Internal fees are collected by your platform e.g. if users pay a fee to you for facilitating a transaction from user to user. All other field amounts should not include the value of these fees.
          example: 5
        external_fee:
          type: number
          description: |
            The sum of all external fees associated with the transaction, specified in USD. External fees are paid out to external parties independent of your platform e.g. payment network fees, shipping fees, cleaning fees. All other amount fields should not include the value of these fees
          example: 5
    eventList:
      title: Events
      description: Top-level data about an event.
      properties:
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        digital_data:
          $ref: '#/components/schemas/digitalDataArrayProperties'
        general_data:
          $ref: '#/components/schemas/event'
        is_cold_store:
          type: boolean
          description: Storage location in Unit21 system
          example: false
        location_data:
          $ref: '#/components/schemas/locationDataArrayProperties'
        transaction_data:
          $ref: '#/components/schemas/transaction'
    updateEventResponse:
      title: Event create response
      properties:
        event_id:
          $ref: '#/components/schemas/eventId'
    eventIds:
      properties:
        event_ids:
          type: array
          description: Array of the unique identifiers of the event IDs.
          items:
            type: integer
          example:
            - 6565465
            - 1363453
    eventExportFilters:
      properties:
        filters:
          type: object
          description: Filter to narrow down events in export
          properties:
            statuses:
              type: array
              description: Status for the events.
              items:
                type: string
                example: new
            status:
              type: string
              description: Status of the event.
              example: active
            start_date:
              type: string
              description: Event creation date start.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Event creation date end.
              example: '2021-11-05 04:13:46'
            minimum_amount:
              type: integer
              description: Minimum amount in the event transaction.
              example: 1000
            maximum_amount:
              type: integer
              description: Maximum amount in the event transaction.
              example: 100000
            currency:
              type: string
              description: Currency used in the transaction.
              example: USD
            entity_ids:
              type: array
              description: Numerical IDs of the entities.
              items:
                type: integer
                example: 15453219
              example:
                - 3242342
                - 3423432
    listRequest:
      type: object
      required:
        - limit
        - offset
      properties:
        limit:
          type: integer
          description: Number of objects per page.
          minimum: 0
          maximum: 50
          example: 2
        offset:
          type: integer
          description: Pagination offset. A value of 1 returns a response beginning with the first record. The offset is relative to the number of pages (not the total count of objects)
          minimum: 1
          default: 1
    ruleList:
      title: Rule
      description: Top-level data about an rule.
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        created_at:
          type: string
          description: Rule creating date as epoch.
          example: 1660620487
        deploy_start_date:
          type: string
          description: Rule deployment start date as epoch.
          example: 1661620487
        deploy_end_date:
          type: string
          description: Rule deployment end date as epoch.
          example: 1661630487
        description:
          type: string
          description: Description for the rule.
          example: This rule flags first party fraud
        frequency:
          type: string
          description: How often the rule runs.
          example: 1h
        lookback_period:
          type: string
          description: The historic data set for the rule.
          example: 24h
        rule_type:
          type: string
          enum:
            - BASIC
            - ADVANCED
          description: The validation type for the rule.
          example: BASIC
        source:
          type: string
          enum:
            - internal
            - external
          description: LEGACY. If your platform owns and administers this rule, the rule is `internal`, otherwise it is `external`.
          example: internal
        status:
          type: string
          description: Status for the rule.
          example: ACTIVE
        tags:
          type: array
          description: Numerical IDs of the tags.
          items:
            type: integer
            example: 9
        title:
          type: string
          description: Name for the rule.
          example: First party fraud simple count rule
    listRuleResponse:
      type: object
      properties:
        rules:
          type: array
          description: List of rule objects.
          items:
            $ref: '#/components/schemas/ruleList'
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    rule-unit21-Ids:
      properties:
        rule_ids:
          type: array
          description: List of unit21 IDs.
          items:
            $ref: '#/components/schemas/unit21Id'
    ruleExportFilters:
      properties:
        filters:
          type: object
          description: Filter to narrow down rules in export.
          properties:
            statuses:
              type: array
              description: Status for the rule.
              items:
                type: string
                enum:
                  - ACTIVE
                  - INACTIVE
                  - VALIDATION
            status:
              type: string
              description: Status for the rule.
              example: OPEN
            tag_ids:
              type: array
              description: Numerical IDs of the tags.
              items:
                type: integer
                example: 9
            agent_ids:
              type: array
              description: Numerical IDs of the agents.
              items:
                type: integer
                example: 14
            start_date:
              type: string
              description: Rule creation start date.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Rule Creation end date.
              example: '2021-11-05 04:13:46'
            rule_ids:
              type: array
              description: Numerical IDs of the rules.
              items:
                type: integer
                example: 14
    listAlertRequest:
      type: object
      required:
        - limit
        - offset
      properties:
        limit:
          type: integer
          description: Number of objects per page.
          minimum: 0
          maximum: 50
          example: 2
        offset:
          type: integer
          description: Pagination offset. A value of 1 returns a response beginning with the first record. The offset is relative to the number of pages (not the total count of objects)
          minimum: 1
          default: 1
        case_id:
          type: integer
          description: Associated case ID filter
          example: 12856
    Disposition:
      type: string
      description: Labels that describe the outcome of an alert or case investigation. More info in [this knowledge base article about dispositions](https://docs.unit21.ai/docs/concept-dispositions).
      maxLength: 128
      example: TRUE_POSITIVE
    dispositionedBy:
      type: array
      description: List of agent emails. Returns only objects whose dispositions were most recently changed by listed agents.
      items:
        type: string
        example: agent1@example.com
    rulesU21Array:
      type: array
      description: Only objects associated with the listed rules' `unit21_id` values.
      items:
        type: integer
      example:
        - 13
        - 21
    associatedEntities:
      type: array
      description: Only objects associated with the listed entities' `entity_id` values.
      items:
        type: string
      example:
        - 1011-hgfdg
        - 1012-aedsf
    associatedEvents:
      type: array
      description: Only objects associated with the listed events' `event_id` values.
      items:
        type: string
      example:
        - 30120-dg
        - 30130-kl
    associatedInstruments:
      type: array
      description: Only objects associated with the listed instruments' `instrument_id` values.
      items:
        type: string
      example:
        - 11-account
        - 12-card
    sourceArray:
      type: array
      description: Only `INTERNAL`, only `EXTERNAL`, or both.
      items:
        type: string
        enum:
          - INTERNAL
          - EXTERNAL
    investigationStatus:
      type: string
      description: Investigation status, either `OPEN` or `ClOSED`
      enum:
        - OPEN
        - CLOSED
      example: OPEN
    statusArray:
      type: array
      description: Only objects from the listed set of `status` values. E.g. only `OPEN`
      items:
        $ref: '#/components/schemas/investigationStatus'
    alertListFilters:
      description: To filter your response to a subset of alerts, use these fields.
      properties:
        types:
          type: array
          description: The `alert_types` to include─any or all of `tm`, `car`, `manual`, `chainalysis`, and `kyc`
          items:
            type: string
            enum:
              - tm
              - kyc
              - chainalysis
              - manual
              - car
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        dispositions:
          type: array
          description: Set of `disposition` values to include.
          items:
            $ref: '#/components/schemas/Disposition'
        dispositioned_after:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_before:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_by:
          $ref: '#/components/schemas/dispositionedBy'
        rules:
          $ref: '#/components/schemas/rulesU21Array'
        associated_entities:
          $ref: '#/components/schemas/associatedEntities'
        associated_events:
          $ref: '#/components/schemas/associatedEvents'
        associated_instruments:
          $ref: '#/components/schemas/associatedInstruments'
        sources:
          $ref: '#/components/schemas/sourceArray'
        statuses:
          $ref: '#/components/schemas/statusArray'
        tag_filters:
          $ref: '#/components/schemas/Tags'
        options:
          type: object
          description: Options for the data included in the returned alerts. Removing unneeded options can improve response speed.
          properties:
            include_associations:
              type: boolean
              description: If `true`, the response includes all cases associated with the alert under `descendant_cases`.
              example: false
            include_actions:
              type: boolean
              description: If `true`, the response includes list of all actions taken on the alert, including disposition changes, status changes, reassignments, etcetera.
              example: false
            include_checklist:
              type: boolean
              description: If `true`, the response includes list of all checklists items taken on the alert.
              example: false
    dispositionNotes:
      type: string
      description: Free form text documenting reasoning and investigation notes
      example: User confirmed that they did not initiate transaction
    actions:
      type: array
      description: A list of actions that agents have taken.
      items:
        type: object
        properties:
          action_time:
            type: string
            description: Action date as epoch.
            example: 1661620487
          author:
            type: string
            description: Agent email that performed the action.
            example: laura@unit21.ai
          disposition:
            $ref: '#/components/schemas/Disposition'
          disposition_notes:
            $ref: '#/components/schemas/dispositionNotes'
          reassigned_to:
            type: string
            description: Agent email if action is reassignment.
            example: laura@unit21.ai
          status_changed_to:
            type: string
            description: New status resulting from the action.
            example: OPEN
          subdispositions:
            type: array
            description: List of subdispositions.
            items:
              type: object
              properties:
                subdisposition:
                  type: string
                  example: Reason for Dismissal
                value:
                  type: string
                  example: False Positive
          work_started_on:
            type: string
            description: Work counter trigger as epoch.
            example: 1661620487
    checklist:
      type: array
      description: List of custom checklists
      items:
        type: object
        properties:
          content:
            type: string
            description: Custom checklist content.
            example: ''
          checklist_name:
            type: string
            description: Name of the checklist.
            example: P0 checklist
          queue_name:
            type: string
            description: Name of the queue.
            example: P0 queue
    caseId:
      type: string
      description: Unique identifier of the case on the customer's platform
      maxLength: 128
      example: CaseA-123
    descendantCases:
      type: array
      description: Cases created from the alert.
      items:
        type: object
        properties:
          case_id:
            $ref: '#/components/schemas/caseId'
          unit21_id:
            $ref: '#/components/schemas/unit21Id'
    alertId:
      type: string
      description: Unique identifier of the alert on the customer's platform.
      maxLength: 128
      example: alertA-028eb01a-f8d3-42fb-b398-785b596ee4cb
    listAlertResponse:
      type: object
      properties:
        alerts:
          type: array
          description: List of alert objects.
          items:
            properties:
              unit21_id:
                $ref: '#/components/schemas/unit21Id'
              actions:
                $ref: '#/components/schemas/actions'
              checklist:
                $ref: '#/components/schemas/checklist'
              descendant_cases:
                $ref: '#/components/schemas/descendantCases'
              alert_id:
                $ref: '#/components/schemas/alertId'
              alert_type:
                type: string
                enum:
                  - chainlysis
                  - tm
                  - kyc
                  - manual
                  - car
                description: Either transaction monitoring, `tm`, or know-your-customer `kyc`. Default is `tm`
                example: tm
              assigned_to:
                type: string
                description: Agent email assigned to work the alert
                example: laura@unit21.ai
              created_at:
                $ref: '#/components/schemas/registeredAt'
              custom_data:
                $ref: '#/components/schemas/customDataProperties'
              description:
                type: string
                description: Description of the alert
                example: Flagged 2 transactions in last hour that were 3 standard deviations outside 3 month mean.
              disposition:
                $ref: '#/components/schemas/Disposition'
              disposition_at:
                type: string
                description: Date the alert was dispositioned as epoch.
                example: 1661630487
              disposition_notes:
                $ref: '#/components/schemas/dispositionNotes'
              dispositioned_by:
                type: string
                description: Agent that disposed the alert
                example: laura@unit21.ai
              due_date:
                type: string
                description: Date the alert is due as epoch.
                example: 1661630487
              due_date_text:
                type: string
                description: Date the alert is due as text.
                example: due 278 days ago
              end_date:
                type: string
                description: Date the alert is closed as epoch.
                example: 1661630487
              rules:
                type: array
                description: List of rule objects.
                items:
                  $ref: '#/components/schemas/ruleList'
              sources:
                type: array
                description: Sources for the alerts.
                items:
                  type: string
                  enum:
                    - INTERNAL
                    - EXTERNAL
              start_date:
                type: string
                description: Date the alert was first investigated as epoch.
                example: 1661630487
              status:
                $ref: '#/components/schemas/investigationStatus'
              tags:
                $ref: '#/components/schemas/Tags'
              title:
                type: string
                description: Title of the alert
                example: Account deviation for user T18029
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    createAlertRequest:
      title: Create an alert
      required:
        - alert_id
        - alert_type
        - created_at
        - title
        - status
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        alert_type:
          type: string
          enum:
            - chainalysis
            - tm
            - kyc
            - manual
            - car
        title:
          type: string
          description: Title of the alert
          example: Account deviation for user T18029
        created_at:
          $ref: '#/components/schemas/registeredAt'
        status:
          $ref: '#/components/schemas/investigationStatus'
        description:
          type: string
          description: Description of the alert
          example: Flagged 2 transactions in last hour that were 3 standard deviations outside 3 month mean.
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_notes:
          $ref: '#/components/schemas/dispositionNotes'
        rules:
          description: Array of rules, consisting of `rule_id`
          type: array
          items:
            type: string
            example: r3-0ddfn3
        events:
          description: Array of events, consisting of `event_id` and `event_type`
          type: array
          items:
            type: object
            required:
              - event_id
              - event_type
            properties:
              event_id:
                example: event-1063e4e3e1
                type: string
              event_type:
                $ref: '#/components/schemas/eventType'
        entities:
          description: Array of entities, consisting of `entity_id` and `entity_type`
          type: array
          items:
            type: object
            required:
              - entity_id
            properties:
              entity_id:
                $ref: '#/components/schemas/entityId'
              entity_type:
                $ref: '#/components/schemas/entityType'
        instruments:
          description: Array of instruments, consisting of `instrument_id`
          type: array
          items:
            $ref: '#/components/schemas/instrumentId'
        tags:
          $ref: '#/components/schemas/Tags'
        verification_result_id:
          type: integer
          description: Integer value greater than or equal to 1. Used when `alert_type` is `kyc`.
          minimum: 1
          example: 42
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
    previouslyExisted:
      type: boolean
      description: During upserts, `true` when object already existed at the ID field specified in the POST.
    createAlertResponse:
      title: Create Alert response
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    getAlertResponse:
      title: Get Alert response
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        actions:
          $ref: '#/components/schemas/actions'
        checklist:
          $ref: '#/components/schemas/checklist'
        descendant_cases:
          $ref: '#/components/schemas/descendantCases'
        alert_id:
          $ref: '#/components/schemas/alertId'
        alert_type:
          type: string
          enum:
            - chainlysis
            - tm
            - kyc
            - manual
            - car
          description: Either transaction monitoring, `tm`, or know-your-customer `kyc`. Default is `tm`
          example: tm
        assigned_to:
          type: string
          description: Agent email assigned to work the alert
          example: laura@unit21.ai
        created_at:
          $ref: '#/components/schemas/registeredAt'
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        description:
          type: string
          description: Description of the alert
          example: Flagged 2 transactions in last hour that were 3 standard deviations outside 3 month mean.
        disposition:
          $ref: '#/components/schemas/Disposition'
        dispositioned_by:
          type: string
          description: Agent that disposed the alert
          example: laura@unit21.ai
        due_date:
          type: string
          description: Date the alert is due as epoch.
          example: 1661630487
        due_date_text:
          type: string
          description: Date the alert is due as text.
          example: due 278 days ago
        end_date:
          type: string
          description: Date the alert is closed as epoch.
          example: 1661630487
        rules:
          type: array
          description: List of rule objects.
          items:
            $ref: '#/components/schemas/ruleList'
        sources:
          type: array
          description: Sources for the alerts.
          items:
            type: string
            enum:
              - INTERNAL
              - EXTERNAL
        start_date:
          type: string
          description: Date the alert was first investigated as epoch.
          example: 1661630487
        status:
          $ref: '#/components/schemas/investigationStatus'
        tags:
          $ref: '#/components/schemas/Tags'
        title:
          type: string
          description: Title of the alert
          example: Account deviation for user T18029
    AlertsUpdate:
      properties:
        created_at:
          $ref: '#/components/schemas/registeredAt'
        title:
          type: string
          description: Title of the alert
          example: Account deviation for user T18029
        description:
          type: string
          description: Description of the alert
          example: Flagged 2 transactions in last hour that were 3 standard deviations outside 3 month mean.
        status:
          $ref: '#/components/schemas/investigationStatus'
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_notes:
          $ref: '#/components/schemas/dispositionNotes'
        tags:
          $ref: '#/components/schemas/Tags'
        events:
          description: Array of flagged events, consisting of `event_id` and `event_type`. This will create a placeholder event if one does not exist.
          type: array
          items:
            type: object
            required:
              - event_id
              - event_type
            properties:
              event_id:
                example: event-1063e4e3e1
                type: string
              event_type:
                $ref: '#/components/schemas/eventType'
    updateAlertResponse:
      title: Alert create response
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    alert-unit21-Ids:
      properties:
        alert_ids:
          type: array
          description: List of unit21 IDs.
          items:
            $ref: '#/components/schemas/unit21Id'
    alertExportFilters:
      description: To filter your response.
      properties:
        filters:
          type: object
          description: Filter to narrow down alerts in export
          properties:
            statuses:
              type: array
              description: Statuses for the alerts.
              items:
                type: string
                enum:
                  - OPEN
                  - CLOSED
            status:
              type: string
              description: Status for the alert.
              example: OPEN
            tag_ids:
              type: array
              description: Numerical IDs of the tags.
              items:
                type: integer
                example: 9
            rule_ids:
              type: array
              description: Numerical IDs of the rules.
              items:
                type: integer
                example: 371
            start_date:
              type: string
              description: Alert creation start date.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Alert creation end date.
              example: '2021-11-05 04:13:46'
            minimum_amount:
              type: integer
              description: Minimum amount in the alert.
              example: 1000
            maximum_amount:
              type: integer
              description: Maximum amount in the alert.
              example: 100000
            agent_ids:
              type: array
              description: Numerical IDs of the agents.
              items:
                type: integer
                example: 14
            team_ids:
              type: array
              description: Numerical IDs of the teams.
              items:
                type: integer
                example: 6
            alert_ids:
              type: array
              description: Numerical ID of the alerts.
              items:
                type: integer
                example: 45
            alert_types:
              type: array
              description: Sources for the alerts.
              items:
                type: string
                enum:
                  - chainlysis
                  - tm
                  - kyc
                  - manual
                  - car
            sources:
              type: array
              description: Sources for the alerts.
              items:
                type: string
                enum:
                  - INTERNAL
                  - EXTERNAL
            disposition_start_date:
              type: string
              description: Disposition start date.
              example: '2019-11-05 04:13:46'
            disposition_end_date:
              type: string
              description: Disposition end date.
              example: '2021-11-05 04:13:46'
            entity_ids:
              type: array
              description: Numerical IDs of the entities.
              items:
                type: integer
                example: 15453219
              example:
                - 3242342
                - 3423432
            phrase:
              type: string
              description: ID or title of the alert.
              example: Case 37765
            alerting_org_ids:
              type: array
              description: Numerical ID of the alerting org.
              items:
                type: integer
                example: 45
            alert_queue_ids:
              type: array
              description: Numerical IDs of the alert queues.
              items:
                type: integer
                example: 125
            disposition:
              type: string
              description: Disposition name.
              example: CLOSED
            subdisposition_ids:
              type: array
              description: Numerical IDs of the agents.
              items:
                type: integer
                example: 2
            subdisposition_option_ids:
              type: array
              description: Numerical IDs of the subdisposition.
              items:
                type: integer
                example: 1
    summary:
      properties:
        is_summary:
          type: boolean
          description: FALSE will generate the detailed version of report. Otherwise, TRUE is the default which generates the summary
          example: true
    associatedAlerts:
      type: array
      description: Only objects associated with the listed case `unit21_id` values.
      items:
        type: integer
      example:
        - 564511
        - 126546
    caseListFilters:
      description: To filter your response to a subset of alerts, use these fields.
      properties:
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        dispositions:
          type: array
          description: Set of `disposition` values to include.
          items:
            $ref: '#/components/schemas/Disposition'
        dispositioned_after:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_before:
          $ref: '#/components/schemas/registeredAt'
        dispositioned_by:
          $ref: '#/components/schemas/dispositionedBy'
        rules:
          $ref: '#/components/schemas/rulesU21Array'
        associated_entities:
          $ref: '#/components/schemas/associatedEntities'
        associated_events:
          $ref: '#/components/schemas/associatedEvents'
        associated_alerts:
          $ref: '#/components/schemas/associatedAlerts'
        sources:
          $ref: '#/components/schemas/sourceArray'
        statuses:
          $ref: '#/components/schemas/statusArray'
        options:
          type: object
          description: Options for the data included in the returned case. Removing unneeded options can improve response speed.
          properties:
            include_associations:
              type: boolean
              description: If `true`, the response includes all rule IDs and SAR filing IDs associated with the case under `rules` and `descendant_sar_filing`.
              example: false
            include_actions:
              type: boolean
              description: If `true`, the response includes list of all actions taken on the case, including disposition changes, status changes, reassignments, etcetera.
              example: false
            include_checklist:
              type: boolean
              description: If `true`, the response includes list of all checklists items taken on the alert.
              example: false
    sarId:
      type: string
      description: Unique identifier of the SAR on the customer's platform.
      maxLength: 128
      example: sar-543439078
    descendantSarFiling:
      type: array
      description: SARs created from the case.
      items:
        type: object
        properties:
          case_id:
            $ref: '#/components/schemas/sarId'
          unit21_id:
            $ref: '#/components/schemas/unit21Id'
    caseList:
      title: Case
      description: Top-level data about a case.
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        assigned_to:
          type: string
          description: Agent email assigned to work the case
          example: laura@unit21.ai
        case_id:
          $ref: '#/components/schemas/caseId'
        created_at:
          $ref: '#/components/schemas/registeredAt'
        created_by:
          type: string
          description: Agent that created the case
          example: laura@unit21.ai
        custom_data:
          $ref: '#/components/schemas/customDataProperties'
        descendant_sar_filing:
          $ref: '#/components/schemas/descendantSarFiling'
        description:
          type: string
          description: Description of the case
          maxLength: 1024
          example: suspected money laundering example
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_at:
          type: string
          description: Date the case was dispositioned as epoch.
          example: 1661630487
        dispositioned_by:
          type: string
          description: Agent that disposed the case
          example: laura@unit21.ai
        rules:
          type: array
          description: List of rule objects.
          items:
            $ref: '#/components/schemas/ruleList'
        source:
          type: array
          description: Sources for the case.
          items:
            type: string
            enum:
              - INTERNAL
              - EXTERNAL
        status:
          $ref: '#/components/schemas/investigationStatus'
        tags:
          $ref: '#/components/schemas/Tags'
        title:
          type: string
          description: Title of the case
          example: Account deviation for user T18029
    listCaseResponse:
      type: object
      properties:
        alerts:
          type: array
          description: List of case objects.
          items:
            $ref: '#/components/schemas/caseList'
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    Cases:
      description: Top-level case data
      title: Case data
      required:
        - case_id
        - created_at
        - title
        - start_date
      properties:
        case_id:
          $ref: '#/components/schemas/caseId'
        title:
          type: string
          description: Title of the case
          maxLength: 256
          example: Active fraud investigation
        start_date:
          $ref: '#/components/schemas/registeredAt'
        description:
          type: string
          description: Description of the case
          maxLength: 1024
          example: suspected money laundering example
        status:
          $ref: '#/components/schemas/investigationStatus'
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_notes:
          $ref: '#/components/schemas/dispositionNotes'
        end_date:
          $ref: '#/components/schemas/registeredAt'
        tags:
          $ref: '#/components/schemas/Tags'
    entityIds:
      properties:
        entity_ids:
          type: array
          description: List of unique entity IDs.
          items:
            $ref: '#/components/schemas/entityId'
          example:
            - entityA
            - entityB
    createCaseResponse:
      title: Create case response
      properties:
        case_id:
          $ref: '#/components/schemas/caseId'
        previously_existed:
          $ref: '#/components/schemas/previouslyExisted'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    getCaseResponse:
      title: Get Case response
      description: Top-level data about a case.
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        actions:
          $ref: '#/components/schemas/actions'
        case_id:
          $ref: '#/components/schemas/caseId'
        checklist:
          $ref: '#/components/schemas/checklist'
        created_at:
          $ref: '#/components/schemas/registeredAt'
        created_by:
          type: string
          description: Agent that created the case
          example: laura@unit21.ai
        descendant_sar_filing:
          $ref: '#/components/schemas/descendantSarFiling'
        description:
          type: string
          description: Description of the case
          maxLength: 1024
          example: suspected money laundering example
        disposition:
          $ref: '#/components/schemas/Disposition'
        disposition_at:
          type: string
          description: Date the case was dispositioned as epoch.
          example: 1661630487
        dispositioned_by:
          type: string
          description: Agent that disposed the case
          example: laura@unit21.ai
        rules:
          type: array
          description: List of rule objects.
          items:
            $ref: '#/components/schemas/ruleList'
        source:
          type: array
          description: Sources for the case.
          items:
            type: string
            enum:
              - INTERNAL
              - EXTERNAL
        status:
          $ref: '#/components/schemas/investigationStatus'
        title:
          type: string
          description: Title of the case
          example: Account deviation for user T18029
    updateCaseResponse:
      title: Case create response
      properties:
        case_id:
          $ref: '#/components/schemas/caseId'
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    caseIds:
      properties:
        case_ids:
          type: array
          description: Array of the unique identifiers of the case IDs.
          items:
            type: integer
          example:
            - 564565
            - 758600
    caseExportFilters:
      description: To filter your response.
      properties:
        filters:
          type: object
          description: Filter to narrow down cases in export
          properties:
            statuses:
              type: array
              description: Statuses for the cases.
              items:
                type: string
                enum:
                  - open
                  - closed
            status:
              type: string
              description: Status for the case.
              example: OPEN
            tag_ids:
              type: array
              description: Numerical IDs of the tags.
              items:
                type: integer
                example: 9
            rule_ids:
              type: array
              description: Numerical IDs of the rules.
              items:
                type: integer
                example: 371
            start_date:
              type: string
              description: Case creation start date.
              example: '2019-11-05 04:13:46'
            end_date:
              type: string
              description: Case creation end date.
              example: '2021-11-05 04:13:46'
            minimum_amount:
              type: integer
              description: Minimum amount in the case.
              example: 1000
            maximum_amount:
              type: integer
              description: Maximum amount in the case.
              example: 100000
            agent_ids:
              type: array
              description: Numerical IDs of the agents.
              items:
                type: integer
                example: 14
            team_ids:
              type: array
              description: Numerical IDs of the teams.
              items:
                type: integer
                example: 6
            case_ids:
              type: array
              description: Numerical ID of the cases.
              items:
                type: integer
                example: 45
    sarListFilters:
      description: To filter your response to a subset of sars, use these fields.
      properties:
        created_after:
          $ref: '#/components/schemas/registeredAt'
        created_before:
          $ref: '#/components/schemas/registeredAt'
        tag_filters:
          $ref: '#/components/schemas/Tags'
        options:
          type: object
          description: Options for the data included in the returned case. Removing unneeded options can improve response speed.
          properties:
            include_associations:
              type: boolean
              description: If `true`, the response includes all rule IDs and SAR filing IDs associated with the sar under `rules` and `descendant_sar_filing`.
              example: false
    sarList:
      title: Sar
      description: Top-level data about a sar.
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        created_at:
          $ref: '#/components/schemas/registeredAt'
        updated_at:
          $ref: '#/components/schemas/registeredAt'
        created_by:
          type: string
          description: Agent name that created the sar
          example: Laura Kassovic
        name:
          type: string
          description: A human-readable name for the report.
          example: SAR Report 36586
        description:
          type: string
          description: Description of the alert
          example: Flagged 2 transactions in last hour that were 3 standard deviations outside 3 month mean.
        lock:
          type: boolean
          description: Is the submission locked?
          example: false
        status:
          type: string
          description: Current filing status
          enum:
            - PREFILING_VALIDATION_PENDING
            - PREFILING_VALIDATION_IN_PROCESS
            - PREFILING_VALIDATION_FAILED
            - PREFILING_VALIDATION_SUCCESS
            - QUEUED_FOR_FILING
            - READY_FOR_REVIEW
            - SENDING_TO_FINCEN
            - SENT_TO_FINCEN
            - FILING_FAILED
            - FILING_MAX_RETRIES_EXCEEDED
            - FILING_SUCCESS
            - FINCEN_VALIDATION_FAILED
            - FINCEN_REJECTED
            - FINCEN_STATUS_OTHER
            - FINCEN_ACCEPTED
          example: PREFILING_VALIDATION_PENDING
        status_updated_at:
          $ref: '#/components/schemas/registeredAt'
        filing_type:
          type: string
          description: INITIAL_REPORT, CORRECT_OR_AMEND_PRIOR_REPORT, or CONTINUING_ACTIVITY_REPORT
          enum:
            - initial_report
            - correct_or_amend_prior_report
            - continuing_activity_report
          example: continuing_activity_report
        submitted:
          type: boolean
          description: Report submited?
          example: true
        submitted_at:
          $ref: '#/components/schemas/registeredAt'
        report_type:
          type: string
          description: GOAML_STR, FINCEN_SAR, ESTONIAN_FIU, or NCA_SAR
          enum:
            - NCA_SAR
            - FINCEN_SAR
            - ESTONIAN_FIU
            - GOAML_STR
          example: GOAML_STR
        tags:
          $ref: '#/components/schemas/Tags'
        amount_volume:
          type: number
          description: The total amount of the transactions
          example: 13562.83
        txn_count:
          type: number
          description: The number of transactions.
          example: 15
        entities:
          type: array
          description: List of entity objects.
          items:
            $ref: '#/components/schemas/entityList'
        events:
          type: array
          description: List of event objects.
          items:
            $ref: '#/components/schemas/eventList'
    listSarResponse:
      type: object
      properties:
        sars:
          type: array
          description: List of sar objects.
          items:
            $ref: '#/components/schemas/sarList'
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    sarIds:
      properties:
        sar_ids:
          type: array
          description: Array of the unique identifiers of the sar IDs.
          items:
            type: integer
          example:
            - 4354543
            - 54377657
            - 1354354
    sarExportFilters:
      properties:
        filters:
          type: object
          description: Filter to narrow down sars in export
          properties:
            statuses:
              type: array
              description: Status for the sars.
              items:
                type: string
                enum:
                  - ARCHIVED
                  - PREFILING_VALIDATION_PENDING
                  - PREFILING_VALIDATION_IN_PROCESS
                  - PREFILING_VALIDATION_FAILED
                  - PREFILING_VALIDATION_SUCCESS
                  - QUEUED_FOR_FILING
                  - READY_FOR_REVIEW
                  - SENDING_TO_FINCEN
                  - SENT_TO_FINCEN
                  - FILING_FAILED
                  - FILING_MAX_RETRIES_EXCEEDED
                  - FILING_SUCCESS
                  - FINCEN_VALIDATION_FAILED
                  - FINCEN_REJECTED
                  - FINCEN_STATUS_OTHER
                  - FINCEN_ACCEPTED
            status:
              type: string
              description: Status of the sar.
              example: active
            tag_ids:
              type: array
              description: Numerical IDs of the tags.
              items:
                type: integer
                example: 9
            created_at_start:
              type: string
              description: Report creation start date.
              example: '2019-11-05 04:13:46'
            created_at_end:
              type: string
              description: Report Creation end date.
              example: '2021-11-05 04:13:46'
            updated_at_start:
              type: string
              description: Report update start date.
              example: '2019-11-05 04:13:46'
            updated_at_end:
              type: string
              description: Report update end date.
              example: '2021-11-05 04:13:46'
            filed_at_start:
              type: string
              description: Report file start date.
              example: '2019-11-05 04:13:46'
            filed_at_end:
              type: string
              description: Report file end date.
              example: '2021-11-05 04:13:46'
            submitted:
              type: boolean
              description: Report submited?
              example: true
            report_type:
              type: string
              description: Type of report.
              example: FINCEN_SAR
              enum:
                - FINCEN_SAR
                - ESTONIAN_FIU
                - GOAML_STR
                - NCA_SAR
    entityVerification:
      title: Entity Verification
      description: Fields to verify an entity
      required:
        - workflow_id
      properties:
        workflow_id:
          $ref: '#/components/schemas/workflowId'
        synchronous_response:
          $ref: '#/components/schemas/synchronousResponse'
        include_full_response:
          $ref: '#/components/schemas/includeFullResponse'
    linkVerificationResult:
      title: Link verification result
      description: Fields to link external verification results to entity in the Unit21 system
      required:
        - verification_type
        - provider_name
        - content
      properties:
        verification_type:
          type: string
          enum:
            - ID_VERIFICATION
            - DOC_VERIFICATION
            - BUSINESS_VERIFICATION
            - WATCHLIST_SCREENING
            - ADVERSE_MEDIA_SCREENING
            - CRYPTO_FORENSICS
          description: Type of verification, in one of the categories that the Unit21 system recognizes
        provider_name:
          type: string
          description: name of KYC provider
          example: FAKE_PROVIDER
        content:
          type: object
          additionalProperties: true
          description: JSON-formatted response from verification provider
          example:
            content:
              test:
                nested_field: 123
              boolean_field: false
              error: An error occurred
        verification_timestamp:
          $ref: '#/components/schemas/registeredAt'
    linkVerificationResponse:
      properties:
        created_at:
          $ref: '#/components/schemas/registeredAt'
        entity_id:
          type: string
          description: Unit21 ID of the entity that the verification was run on.
        source:
          type: string
          description: Provider that ran the verification (IDOLOGY, TRULIOO, etc.)
        type:
          type: string
          description: Type of verification executed (DOC_VERIFICATION, ID_VERIFICATION, etc.)
        verification_workflow_execution_id:
          type: number
          description: ID of the workflow execution
        full_response:
          type: object
          description: Full response from the verification provider running the verification
    verificationWorkflowExecutionId:
      type: number
      description: Unique ID for the verification workflow execution.
      example: 239192
    verificationResult:
      title: Verification result
      description: Verification workflow execution result.
      type: object
      properties:
        continuous_monitoring:
          type: boolean
          description: |
            Enable or disable continuous monitoring. Use `true` to turn on and `false` to turn off.
        created_at:
          $ref: '#/components/schemas/registeredAt'
        entity_id:
          $ref: '#/components/schemas/entityId'
        source:
          type: string
          enum:
            - AU10TIX
            - CHAINALYSIS
            - CSI
            - DOW_JONES
            - IDOLOGY
            - MITEK
            - SMILE_IDENTITY
            - TRULIOO
            - UNIT21
            - EMAILAGE
            - MIDDESK
            - SOCURE
            - NAME_DOB_MATCH
            - DOWJONES
          description: source of the verification.
          example: UNIT21
        type:
          type: string
          enum:
            - ID_VERIFICATION
            - IDOC_VERIFICATION
            - IBUSINESS_VERIFICATION
            - ILOGIC
            - IWATCHLIST_SCREENING
            - IADVERSE_MEDIA
          description: type of verification.
          example: UNIT21
        verification_workflow_execution_id:
          $ref: '#/components/schemas/verificationWorkflowExecutionId'
        full_response:
          type: object
          example: {}
    synchronousResponses:
      type: boolean
      description: 'Default: `false`. If `true`,  the response is returned in the request but may take slightly longer to complete.'
      default: false
      example: false
    continuousMonitoring:
      type: object
      required:
        - continuous_monitoring
      properties:
        continuous_monitoring:
          type: boolean
          description: |
            Enable or disable continuous monitoring. Use `true` to turn on and `false` to turn off.
        synchronous_response:
          $ref: '#/components/schemas/synchronousResponses'
    verificationList:
      title: Verification
      description: list of verification executions.
      type: array
      items:
        type: object
        properties:
          created_at:
            $ref: '#/components/schemas/registeredAt'
          end_action:
            type: string
            enum:
              - $REJECT
              - $OTHER
              - $MANUAL_VERIFICATION
              - $RESUBMIT
              - $ACCEPT
            description: Outcome of the verification.
            example: $REJECT
          verification_workflow_execution_id:
            $ref: '#/components/schemas/verificationWorkflowExecutionId'
    verificationId:
      type: number
      description: Unique numerical identifier of the verification workflow.
      example: 451699
    orgId:
      type: integer
      description: A Unit21 internally-assigned unique identifier for your organization.
      example: 273
    verificationFormId:
      type: number
      description: Unique ID for the verification form.
      example: 239192
    verificationWorkflowId:
      type: number
      description: Unique ID for the verification workflow.
      example: 1316
    verification:
      title: Verification Workflow Execution
      description: Top-level data about an execution of a verification workflow.
      properties:
        alert_id:
          $ref: '#/components/schemas/alertId'
        created_at:
          $ref: '#/components/schemas/registeredAt'
        end_action:
          type: string
          enum:
            - $REJECT
            - $OTHER
            - $MANUAL_VERIFICATION
            - $RESUBMIT
            - $ACCEPT
          description: Outcome of the verification.
          example: $REJECT
        end_time:
          type: string
          description: Verification workflow execution end date as epoch.
          example: 1661620487
        entity_id:
          $ref: '#/components/schemas/entityId'
        id:
          $ref: '#/components/schemas/verificationId'
        is_success:
          type: boolean
          description: Whether or not the workflow successful completed.
        message:
          $ref: '#/components/schemas/message'
        org_id:
          $ref: '#/components/schemas/orgId'
        start_time:
          type: string
          description: Verification workflow execution start date as epoch.
          example: 1661620487
        unit_id:
          $ref: '#/components/schemas/orgId'
        verification_form_id:
          $ref: '#/components/schemas/verificationFormId'
        verification_workflow_id:
          $ref: '#/components/schemas/verificationWorkflowId'
    verificationResultList:
      title: Verification results
      description: list of verification workflow execution results.
      type: array
      items:
        type: object
        properties:
          content:
            type: object
            properties:
              actions:
                type: object
                description: See example.
                example:
                  UNIT21:ID_VERIFICATION:
                    - conditions: $OTHER
                      next_action: $ACCEPT
              start_action:
                type: string
                enum:
                  - TRULIOO:ID_VERIFICATION
                  - CSI:WATCHLIST_SCREENING
                  - IDOLOGY:ID_VERIFICATION
                  - IDOLOGY:DOC_VERIFICATION
                  - JUMIO:DOC_VERIFICATION
                  - IDOLOGY:WATCHLIST_SCREENING
                  - EMAILAGE:ID_VERIFICATION
                  - UNIT21:BUSINESS_VERIFICATION
                  - UNIT21:ID_VERIFICATION
                  - AU10TIX:DOC_VERIFICATION
                  - MIDDESK:BUSINESS_VERIFICATION
                  - SOCURE:ID_VERIFICATION
                  - SOCURE:DOC_VERIFICATION
                  - SOCURE:WATCHLIST_EVENT
                  - NAME_DOB_MATCH:ID_VERIFICATION
                  - EXISTING_VERIFICATION:ID_VERIFICATION
                  - UNIT21:LOGIC
                  - DOW_JONES:ADVERSE_MEDIA
                description: type of verification.
                example: UNIT21:LOGIC
              generate_alert_actions:
                description: Alert
                type: array
                items:
                  type: string
                  enum:
                    - $REJECT
                    - $OTHER
                    - $MANUAL_VERIFICATION
                    - $RESUBMIT
                    - $ACCEPT
                  description: Outcome of the verification.
                  example: $RESUBMIT
                example:
                  - $REJECT
                  - $MANUAL_VERIFICATION
          continuous_monitoring:
            type: boolean
            description: |
              Enable or disable continuous monitoring. Use `true` to turn on and `false` to turn off.
          created_at:
            $ref: '#/components/schemas/registeredAt'
          alert_id:
            $ref: '#/components/schemas/alertId'
          id:
            $ref: '#/components/schemas/verificationId'
          source:
            type: string
            enum:
              - AU10TIX
              - CHAINALYSIS
              - CSI
              - DOW_JONES
              - IDOLOGY
              - MITEK
              - SMILE_IDENTITY
              - TRULIOO
              - UNIT21
              - EMAILAGE
              - MIDDESK
              - SOCURE
              - NAME_DOB_MATCH
              - DOWJONES
            description: source of the verification.
            example: UNIT21
          type:
            type: string
            enum:
              - ID_VERIFICATION
              - IDOC_VERIFICATION
              - IBUSINESS_VERIFICATION
              - ILOGIC
              - IWATCHLIST_SCREENING
              - IADVERSE_MEDIA
            description: type of verification.
            example: UNIT21
          verification_workflow_execution_id:
            $ref: '#/components/schemas/verificationWorkflowExecutionId'
    listExports:
      type: object
      properties:
        limit:
          type: integer
          description: Number of objects per page.
          minimum: 0
          maximum: 50
          example: 2
        offset:
          type: integer
          description: Pagination offset. A value of 1 returns a response beginning with the first record. The offset is relative to the number of pages (not the total count of objects)
          minimum: 1
          default: 1
        file_export_ids:
          type: array
          description: IDs for the files to export
          example:
            - 4
            - 6
          items:
            type: integer
        statuses:
          type: array
          description: Statuses for the files to export. One of READY_FOR_DOWNLOAD, GENERATING, FAILED, REQUESTED
          example:
            - READY_FOR_DOWNLOAD
            - GENERATING
            - FAILED
            - REQUESTED
          items:
            type: string
    fileId:
      type: number
      description: Unique numerical identifier of the file.
      example: 45
    externalId:
      type: string
      description: Unique identifier of the file. File IDs must be unique and only comprise of the characters -_:.@a-zA-Z0-9!#$%&*+/=?^`{'
      minLength: 1
      maxLength: 128
      example: alert-export-company-audit
    externalIds:
      type: array
      description: List of unique file IDs.
      items:
        $ref: '#/components/schemas/externalId'
      example:
        - fileA
        - fileB
    fileList:
      title: File export
      description: Top-level data about a file export.
      properties:
        created_at:
          type: string
          description: File creation date.
          example: '2022-08-09T18:24:27+00:00'
        id:
          $ref: '#/components/schemas/fileId'
        export_type:
          type: string
          enum:
            - ALERT
            - CASE
            - RULE
            - ENTITY
          description: Describes the type of export.
          example: ENTITY
        external_ids:
          $ref: '#/components/schemas/externalIds'
        file_name:
          type: string
          description: File name
          example: 660069841000_bulk_Alert.xlsx
        file_size:
          type: number
          description: size of the file in bytes
          example: 45393365
        request_source:
          type: string
          enum:
            - MANUAL
            - SYSTEM
            - OTHER
          description: Describes the way the export was created
          example: SYSTEM
        status:
          type: string
          enum:
            - READY_FOR_DOWNLOAD
            - GENERATING
            - FAILED
            - REQUESTED
          description: Status for the files to export. One of READY_FOR_DOWNLOAD, GENERATING, FAILED, REQUESTED
          example: REQUESTED
        status_message:
          type: string
          description: Message from the system
          example: ''
    listExportResponse:
      type: object
      properties:
        file_exports:
          type: array
          description: List of file export objects.
          items:
            $ref: '#/components/schemas/fileList'
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    listExportURLResponse:
      type: object
      properties:
        url:
          type: string
          description: URL where the file can be downloaded
      example:
        url: https://dashboard-file-exports.s3.amazonaws.com/20201105-200246_Intuit_BULK_ALERT.xlsx?AWSAccessKeyId=AKIA4GCWZN4AWKTTJM7N&Signature=0jfhY%2FvVGZMpAYrlhWEwhzLt1bw%3D&Expires=1656675423
    listExportNotReadyResponse:
      properties:
        message:
          type: string
          example: File export with id 22 is in PENDING status and is not ready for download.
          description: File is not yet ready to download response
    agentList:
      title: Alert
      description: Top-level data about an alert.
      properties:
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        email:
          type: string
          description: Agent email.
          example: laura@unit21.ai
        full_name:
          type: string
          description: Agent name.
          example: Laura Kassovic
        created_at:
          $ref: '#/components/schemas/registeredAt'
        status:
          type: string
          description: Agent status
          enum:
            - ACTIVE
            - INACTIVE
          example: ACTIVE
    listAgentResponse:
      type: array
      description: List of agent objects.
      items:
        $ref: '#/components/schemas/agentList'
    blacklistList:
      title: Blacklist export
      description: Top-level data about a matchlist.
      properties:
        created_at:
          type: string
          description: Matchlist creation date.
          example: '2022-08-09T18:24:27+00:00'
        description:
          type: string
          description: Matchlist description
          example: List of VIP Clients that are Fortune 500 companies
        name:
          type: string
          description: Matchlist name
          example: Fortune 500 List
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        type:
          type: string
          enum:
            - IP_CIDR
            - IP_INET
            - STRING
            - USER
            - BUSINESS
          description: Describes the type of matchlist.
          example: BUSINESS
    listBlacklistResponse:
      type: object
      properties:
        blacklists:
          type: array
          description: List of matchlist objects.
          items:
            $ref: '#/components/schemas/blacklistList'
        response_count:
          type: integer
          example: 4
          description: Number of objects in the paginated response
        total_count:
          type: integer
          example: 204
          description: Total number of objects in the platform.
    createBlacklist:
      properties:
        name:
          type: string
          description: A human-readable name for the matchlist.
          maxLength: 512
          example: New Matchlist
        description:
          type: string
          description: A descriptive text field for the matchlist, maximum 512 characters in length.
          maxLength: 512
          example: Unit21 rules will check against items in this list
        type:
          type: string
          enum:
            - STRING
            - IP_INET
            - IP_CIDR
            - USER
            - BUSINESS
          description: A value indicating what type of fields the matchlist will contain. One of `STRING`, `IP_INET`, `IP_CIDR`, `USER`, or `BUSINESS`.
    blacklistId:
      type: number
      description: Unique identifier for the matchlist.
      example: 3593
    createBlacklistResponse:
      title: Create Matchlist response
      properties:
        blacklist_id:
          $ref: '#/components/schemas/blacklistId'
    streetAddress:
      type: string
      description: Street name and address number
      maxLength: 128
      example: 2365 Peachtree
    blacklistUser:
      title: User matchlist
      description: Array of user objects. No field is required, but each object MUST contain at least one field.
      type: array
      items:
        type: object
        properties:
          first_name:
            type: string
            description: User's associated first name
            example: John
          middle_name:
            type: string
            description: User's associated middle name
            example: Joseph
          last_name:
            type: string
            description: User's associated last name
            example: Smith
          alias_first_name:
            type: string
            description: Alias or alternate first name
            example: Art
          alias_middle_name:
            type: string
            description: Alias or alternate middle name
            example: Oso
          date_of_birth:
            type: string
            description: In format MM/DD/YYYY
            example: 12/25/1989
          ssn:
            type: string
            pattern: ^\d{3}-\d{2}-\d{4}$
            description: Social security number of the user, in the format xxx-xx-xxxx
            example: 733-99-5921
          street:
            $ref: '#/components/schemas/streetAddress'
          city:
            $ref: '#/components/schemas/City'
          state:
            $ref: '#/components/schemas/State'
          zip_code:
            $ref: '#/components/schemas/zipCode'
          country:
            $ref: '#/components/schemas/Country'
          client_fingerprint:
            description: Digital fingerprints(browser, os, device) associated with the entity.
            type: string
            example: 4908hsdfknkd90432nj3k2kj2jk23kj2k3jk2j3
          ip_address:
            $ref: '#/components/schemas/ipAddressSimple'
          email:
            description: Email associated with this user
            type: string
            example: JohnJay@example.com
          phone_number:
            description: List of phone numbers associated with the entity in [E.164 format](https://en.wikipedia.org/wiki/E.164)─e.g. +12125551395 ( '[+][country code][area code][local phone number]' )
            type: string
            example: '+14159627132'
          entity_status:
            $ref: '#/components/schemas/objectStatus'
          entity_subtype:
            $ref: '#/components/schemas/entitySubtype'
    blacklistBusiness:
      title: Business matchlist
      type: array
      description: Array of business objects. No field is required, but each object MUST contain at least one field.
      items:
        type: object
        properties:
          business_name:
            $ref: '#/components/schemas/businessName'
          dba_name:
            $ref: '#/components/schemas/dbaName'
          corporate_tax_id:
            $ref: '#/components/schemas/corporateTaxId'
          street:
            $ref: '#/components/schemas/streetAddress'
          city:
            $ref: '#/components/schemas/City'
          state:
            $ref: '#/components/schemas/State'
          country:
            $ref: '#/components/schemas/Country'
          zip_code:
            $ref: '#/components/schemas/zipCode'
    blacklistINET:
      title: IP INET
      type: array
      description: Array of single IPs
      items:
        type: object
        required:
          - ip_address
        properties:
          ip_address:
            $ref: '#/components/schemas/ipAddressSimple'
          source:
            type: string
            description: Origin of IP
            example: Internal list
    blacklistCIDR:
      title: Matchlist of IP CIDR
      type: array
      description: Array of IP ranges
      items:
        type: object
        required:
          - cidr
        properties:
          cidr:
            type: string
            description: CIDR IP range. Check ranges with [this calculator](https://www.ipaddressguide.com/cidr)
            example: 255.255.255.255/24
          source:
            type: string
            description: Origin of IP range
            example: USA
    blacklistString:
      title: Matchlist string
      type: array
      description: Array of text strings in key value pairs
      items:
        type: object
        properties:
          blacklist_value:
            type: string
            description: string value to upload to matchlist
            example: Anything
    createDatafileResponse:
      title: Create datafile response
      properties:
        file_name:
          type: string
          description: File name
          example: file1.txt
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
    datafileList:
      title: Datafile import
      description: Top-level data about a datafile import.
      properties:
        file_name:
          type: string
          description: File name
          example: 660069841000_bulk_Alert.xlsx
        status:
          type: string
          enum:
            - AWAITING_TRIGGER
            - VALIDATION_PENDING
            - VALIDATION_FAILED
            - PROCESS_PENDING
            - PROCESS_SUCCESS
            - PROCESS_FAILED
            - PROCESS_ABORTED
            - OTHER_FAILED
            - UPLOADING
          description: Status for the files to import.
          example: UPLOADING
        unit21_id:
          $ref: '#/components/schemas/unit21Id'
        uploaded_at:
          type: string
          description: File upload date.
          example: '2020-06-01 01:42:07'
        uploaded_by:
          type: string
          description: Agent email.
          example: laura@unit21.ai
        entity_count:
          type: number
          description: number of entities found in the file.
          example: 56
        event_count:
          type: number
          description: number of events found in the file.
          example: 123
        instrument_count:
          type: number
          description: number of instruments found in the file.
          example: 3
  requestBodies:
    createEntity:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createEntityRequest'
    createEntityDirect:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createEntityDirectRequest'
    createInstrument:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createInstrumentRequest'
    list:
      description: ''
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/listRequest'
    createAlert:
      description: ''
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createAlertRequest'
  responses:
    '400':
      description: Bad Request. Your request is invalid.
    '401':
      description: Unauthorized. Your client_id, client_secret, or access_token is invalid.
    '403':
      description: Forbidden. You do not have the permissions to access the requested resource.
    '404':
      description: Not Found. The specified resource could not be found.
    '409':
      description: Conflict. You tried to insert or overwrite a system resource that cannot be overwritten.
    '423':
      description: Locked. Object updates in progress. Please try again later.
    '429':
      description: Rate Limit Reached. You have reached the request rate limit. Try your request again later.
    '500':
      description: Internal Server Error. We had a problem with our server. Try again later.
    '503':
      description: Service Unavailable. We're temporarily offline for maintenance. Please try again later.
  parameters:
    entity_id:
      in: path
      name: entity_id
      schema:
        $ref: '#/components/schemas/entityId'
      required: true
      description: Unique identifier of the entity in your system
      example: userA-38f8e0Rwdf63nld71112345132UeUKFWE123
    org_name:
      in: path
      name: org_name
      schema:
        type: string
      required: true
      description: Name of organization in your environment
      example: unit21
    instrument_id:
      in: path
      name: instrument_id
      schema:
        type: string
      required: true
      description: Unique identifier of the instrument on your platform
      example: 1036492444
    event_id:
      in: path
      name: event_id
      schema:
        type: string
      required: true
      description: Unique identifier of the event on your platform
      example: 1560408033
    unit21_id:
      in: path
      name: unit21_id
      schema:
        type: string
      required: true
      description: A Unit21 internally-assigned unique identifier for an object within the Unit21 system. Depending on the endpoint, `unit21_id` can refer to an entity, an event, a case, an alert, a device, etc.
      example: 571485314
    result_id:
      in: path
      name: result_id
      schema:
        type: string
      required: true
      description: A Unit21 internally-assigned unique identifier for the verification workflow of the entity.
      example: verified-customer-onboarding
    verification_workflow_execution_id:
      in: path
      name: verification_workflow_execution_id
      schema:
        type: integer
      required: true
      description: A Unit21 internally-assigned unique identifier for the verification workflow execution.
      example: 14823
    export_id:
      in: path
      name: file_export_id
      schema:
        type: integer
      required: true
      description: A Unit21 internally-assigned unique identifier for an a file.
      example: 45
    agent_email:
      in: path
      name: agent_email
      schema:
        type: string
      required: true
      description: Email of an agent in your organization
      example: foobar@unit21.ai
    pre_signed_url:
      in: path
      name: pre_signed_url
      schema:
        type: string
      required: true
      description: A Unit21 internally-assigned unique url for an AWS S3 bucket where your organization can upload data.
      example: https://local-tm-uploads.s3.amazonaws.com/
    file_id:
      in: path
      name: file_id
      schema:
        type: integer
      required: true
      description: Unique identifier of the datafile in the Unit21 system
      example: 45
